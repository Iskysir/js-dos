/* DOSBox x86 opcode functions file generated by extractfun.py */

static int x86_illegal(void) {
    return CASERET_ILLEGAL;
}
static int x86_ADD_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_ADDb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ADDb;;} };return CASERET_BREAK;
}

static int x86_ADD_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ADDw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ADDw;;} };return CASERET_BREAK;
}

static int x86_ADD_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_ADDb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_ADDb;;} };return CASERET_BREAK;
}

static int x86_ADD_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_ADDw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_ADDw;;} };return CASERET_BREAK;
}

static int x86_ADD_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_ADDb;};return CASERET_BREAK;
}

static int x86_ADD_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_ADDw;;};return CASERET_BREAK;
}

static int x86_WPUSH_ES(void) {
  CPU_Push16(SegValue(es));return CASERET_BREAK;
}

static int x86_WPOP_ES(void) {
  if (CPU_PopSeg(es,false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_OR_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_ORb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ORb;;} };return CASERET_BREAK;
}

static int x86_OR_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ORw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ORw;;} };return CASERET_BREAK;
}

static int x86_OR_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_ORb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_ORb;;} };return CASERET_BREAK;
}

static int x86_OR_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_ORw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_ORw;;} };return CASERET_BREAK;
}

static int x86_OR_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_ORb;};return CASERET_BREAK;
}

static int x86_OR_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_ORw;;};return CASERET_BREAK;
}

static int x86_WPUSH_CS(void) {
  CPU_Push16(SegValue(cs));return CASERET_BREAK;
}

static int x86_2_byte_opcodes(void) {
  core.opcode_index|=0x100;
  return CASERET_RESTART;
  return CASERET_BREAK;
}

static int x86_ADC_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; *earb=lflags.res.byte[0]; lflags.type=t_ADCb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ADCb;;} };return CASERET_BREAK;
}

static int x86_ADC_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; *earw=lflags.res.word[0]; lflags.type=t_ADCw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ADCw;;} };return CASERET_BREAK;
}

static int x86_ADC_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; *rmrb=lflags.res.byte[0]; lflags.type=t_ADCb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; *rmrb=lflags.res.byte[0]; lflags.type=t_ADCb;;} };return CASERET_BREAK;
}

static int x86_ADC_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; *rmrw=lflags.res.word[0]; lflags.type=t_ADCw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; *rmrw=lflags.res.word[0]; lflags.type=t_ADCw;;} };return CASERET_BREAK;
}

static int x86_ADC_AL_Ib(void) {
  { lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_ADCb;};return CASERET_BREAK;
}

static int x86_ADC_AX_Iw(void) {
  { lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_ADCw;;};return CASERET_BREAK;
}

static int x86_WPUSH_SS(void) {
  CPU_Push16(SegValue(ss));return CASERET_BREAK;
}

static int x86_WPOP_SS(void) {
  if (CPU_PopSeg(ss,false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  CPU_Cycles++;
  return CASERET_BREAK;
}

static int x86_SBB_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); *earb=lflags.res.byte[0]; lflags.type=t_SBBb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SBBb;;} };return CASERET_BREAK;
}

static int x86_SBB_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); *earw=lflags.res.word[0]; lflags.type=t_SBBw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SBBw;;} };return CASERET_BREAK;
}

static int x86_SBB_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); *rmrb=lflags.res.byte[0]; lflags.type=t_SBBb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); *rmrb=lflags.res.byte[0]; lflags.type=t_SBBb;;} };return CASERET_BREAK;
}

static int x86_SBB_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); *rmrw=lflags.res.word[0]; lflags.type=t_SBBw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); *rmrw=lflags.res.word[0]; lflags.type=t_SBBw;;} };return CASERET_BREAK;
}

static int x86_SBB_AL_Ib(void) {
  { lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_SBBb;};return CASERET_BREAK;
}

static int x86_SBB_AX_Iw(void) {
  { lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_SBBw;;};return CASERET_BREAK;
}

static int x86_WPUSH_DS(void) {
  CPU_Push16(SegValue(ds));return CASERET_BREAK;
}

static int x86_WPOP_DS(void) {
  if (CPU_PopSeg(ds,false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_AND_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_ANDb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ANDb;;} };return CASERET_BREAK;
}

static int x86_AND_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ANDw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ANDw;;} };return CASERET_BREAK;
}

static int x86_AND_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_ANDb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_ANDb;;} };return CASERET_BREAK;
}

static int x86_AND_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_ANDw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_ANDw;;} };return CASERET_BREAK;
}

static int x86_AND_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_ANDb;};return CASERET_BREAK;
}

static int x86_AND_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_ANDw;;};return CASERET_BREAK;
}

static int x86_SEG_ES(void) {
  core.base_ds=SegPhys(es); core.base_ss=SegPhys(es); core.base_val_ds=es; return CASERET_RESTART;;return CASERET_BREAK;
}

static int x86_DAA(void) {
  if (((cpu_regs.regs[REGI_AX].byte[0] & 0x0F)>0x09) || get_AF()) { if ((cpu_regs.regs[REGI_AX].byte[0] > 0x99) || get_CF()) { cpu_regs.regs[REGI_AX].byte[0]+=0x60; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } cpu_regs.regs[REGI_AX].byte[0]+=0x06; if (true) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } else { if ((cpu_regs.regs[REGI_AX].byte[0] > 0x99) || get_CF()) { cpu_regs.regs[REGI_AX].byte[0]+=0x60; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } if (false) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } if ((cpu_regs.regs[REGI_AX].byte[0]&0x80)) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; if ((cpu_regs.regs[REGI_AX].byte[0]==0)) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (parity_lookup[cpu_regs.regs[REGI_AX].byte[0]]) cpu_regs.flags|=0x00000004; else cpu_regs.flags&=~0x00000004; lflags.type=t_UNKNOWN;;return CASERET_BREAK;
}

static int x86_SUB_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SUBb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SUBb;;} };return CASERET_BREAK;
}

static int x86_SUB_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_SUBw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SUBw;;} };return CASERET_BREAK;
}

static int x86_SUB_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_SUBb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_SUBb;;} };return CASERET_BREAK;
}

static int x86_SUB_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_SUBw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_SUBw;;} };return CASERET_BREAK;
}

static int x86_SUB_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_SUBb;};return CASERET_BREAK;
}

static int x86_SUB_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_SUBw;;};return CASERET_BREAK;
}

static int x86_SEG_CS(void) {
  core.base_ds=SegPhys(cs); core.base_ss=SegPhys(cs); core.base_val_ds=cs; return CASERET_RESTART;;return CASERET_BREAK;
}

static int x86_DAS(void) {
  { Bit8u osigned=cpu_regs.regs[REGI_AX].byte[0] & 0x80; if (((cpu_regs.regs[REGI_AX].byte[0] & 0x0f) > 9) || get_AF()) { if ((cpu_regs.regs[REGI_AX].byte[0]>0x99) || get_CF()) { cpu_regs.regs[REGI_AX].byte[0]-=0x60; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } else { if ((cpu_regs.regs[REGI_AX].byte[0]<=0x05)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } cpu_regs.regs[REGI_AX].byte[0]-=6; if (true) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } else { if ((cpu_regs.regs[REGI_AX].byte[0]>0x99) || get_CF()) { cpu_regs.regs[REGI_AX].byte[0]-=0x60; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; } if (false) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } if (osigned && ((cpu_regs.regs[REGI_AX].byte[0]&0x80)==0)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if ((cpu_regs.regs[REGI_AX].byte[0]&0x80)) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; if ((cpu_regs.regs[REGI_AX].byte[0]==0)) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (parity_lookup[cpu_regs.regs[REGI_AX].byte[0]]) cpu_regs.flags|=0x00000004; else cpu_regs.flags&=~0x00000004; lflags.type=t_UNKNOWN; };return CASERET_BREAK;
}

static int x86_XOR_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_XORb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_XORb;;} };return CASERET_BREAK;
}

static int x86_XOR_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_XORw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_XORw;;} };return CASERET_BREAK;
}

static int x86_XOR_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_XORb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; *rmrb=lflags.res.byte[0]; lflags.type=t_XORb;;} };return CASERET_BREAK;
}

static int x86_XOR_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_XORw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; *rmrw=lflags.res.word[0]; lflags.type=t_XORw;;} };return CASERET_BREAK;
}

static int x86_XOR_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; cpu_regs.regs[REGI_AX].byte[0]=lflags.res.byte[0]; lflags.type=t_XORb;};return CASERET_BREAK;
}

static int x86_XOR_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_XORw;;};return CASERET_BREAK;
}

static int x86_SEG_SS(void) {
  core.base_ds=SegPhys(ss); core.base_ss=SegPhys(ss); core.base_val_ds=ss; return CASERET_RESTART;;return CASERET_BREAK;
}

static int x86_AAA(void) {
  if (((cpu_regs.regs[REGI_AX].byte[0]>=0x7a) && (cpu_regs.regs[REGI_AX].byte[0]<=0xf9))) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; if ((cpu_regs.regs[REGI_AX].byte[0] & 0xf) > 9) { if ((cpu_regs.regs[REGI_AX].byte[0]&0xf0)==0x70) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; cpu_regs.regs[REGI_AX].word[0] += 0x106; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.regs[REGI_AX].byte[0] == 0)) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (true) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } else if (get_AF()) { cpu_regs.regs[REGI_AX].word[0] += 0x106; if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if (false) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (true) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } else { if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.regs[REGI_AX].byte[0] == 0)) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (false) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } if (parity_lookup[cpu_regs.regs[REGI_AX].byte[0]]) cpu_regs.flags|=0x00000004; else cpu_regs.flags&=~0x00000004; cpu_regs.regs[REGI_AX].byte[0] &= 0x0F; lflags.type=t_UNKNOWN;;return CASERET_BREAK;
}

static int x86_CMP_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;;} };return CASERET_BREAK;
}

static int x86_CMP_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;} };return CASERET_BREAK;
}

static int x86_CMP_Gb_Eb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=*rmrb;lflags.var2.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;;} };return CASERET_BREAK;
}

static int x86_CMP_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=*rmrw;lflags.var2.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;} };return CASERET_BREAK;
}

static int x86_CMP_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;};return CASERET_BREAK;
}

static int x86_CMP_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;};return CASERET_BREAK;
}

static int x86_SEG_DS(void) {
  core.base_ds=SegPhys(ds); core.base_ss=SegPhys(ds); core.base_val_ds=ds; return CASERET_RESTART;;return CASERET_BREAK;
}

static int x86_AAS(void) {
  if ((cpu_regs.regs[REGI_AX].byte[0] & 0x0f)>9) { if ((cpu_regs.regs[REGI_AX].byte[0]>0x85)) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; cpu_regs.regs[REGI_AX].word[0] -= 0x106; if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if (true) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } else if (get_AF()) { if (((cpu_regs.regs[REGI_AX].byte[0]>=0x80) && (cpu_regs.regs[REGI_AX].byte[0]<=0x85))) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if ((cpu_regs.regs[REGI_AX].byte[0]<0x06) || (cpu_regs.regs[REGI_AX].byte[0]>0x85)) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; cpu_regs.regs[REGI_AX].word[0] -= 0x106; if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if (true) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } else { if ((cpu_regs.regs[REGI_AX].byte[0]>=0x80)) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if (false) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; } if ((cpu_regs.regs[REGI_AX].byte[0] == 0)) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (parity_lookup[cpu_regs.regs[REGI_AX].byte[0]]) cpu_regs.flags|=0x00000004; else cpu_regs.flags&=~0x00000004; cpu_regs.regs[REGI_AX].byte[0] &= 0x0F; lflags.type=t_UNKNOWN;;return CASERET_BREAK;
}

static int x86_INC_AX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_CX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_CX].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_CX].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_DX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_DX].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_DX].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_BX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_BX].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_BX].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_SP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_SP].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_SP].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_BP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_BP].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_BP].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_SI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_SI].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_SI].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_INC_DI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_DI].word[0]; lflags.res.word[0]=lflags.var1.word[0]+1; cpu_regs.regs[REGI_DI].word[0]=lflags.res.word[0]; lflags.type=t_INCw;;return CASERET_BREAK;
}

static int x86_DEC_AX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_AX].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_CX(void) {
    if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_CX].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_CX].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_DX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_DX].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_DX].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_BX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_BX].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_BX].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_SP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_SP].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_SP].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_BP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_BP].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_BP].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_SI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_SI].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_SI].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_DEC_DI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=cpu_regs.regs[REGI_DI].word[0]; lflags.res.word[0]=lflags.var1.word[0]-1; cpu_regs.regs[REGI_DI].word[0]=lflags.res.word[0]; lflags.type=t_DECw;;return CASERET_BREAK;
}

static int x86_PUSH_AX(void) {
  CPU_Push16(cpu_regs.regs[REGI_AX].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_CX(void) {
  CPU_Push16(cpu_regs.regs[REGI_CX].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_DX(void) {
  CPU_Push16(cpu_regs.regs[REGI_DX].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_BX(void) {
  CPU_Push16(cpu_regs.regs[REGI_BX].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_SP(void) {
  CPU_Push16(cpu_regs.regs[REGI_SP].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_BP(void) {
  CPU_Push16(cpu_regs.regs[REGI_BP].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_SI(void) {
  CPU_Push16(cpu_regs.regs[REGI_SI].word[0]);return CASERET_BREAK;
}

static int x86_PUSH_DI(void) {
  CPU_Push16(cpu_regs.regs[REGI_DI].word[0]);return CASERET_BREAK;
}

static int x86_POP_AX(void) {
  cpu_regs.regs[REGI_AX].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_CX(void) {
  cpu_regs.regs[REGI_CX].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_DX(void) {
  cpu_regs.regs[REGI_DX].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_BX(void) {
  cpu_regs.regs[REGI_BX].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_SP(void) {
  cpu_regs.regs[REGI_SP].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_BP(void) {
  cpu_regs.regs[REGI_BP].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_SI(void) {
  cpu_regs.regs[REGI_SI].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_POP_DI(void) {
  cpu_regs.regs[REGI_DI].word[0]=CPU_Pop16();return CASERET_BREAK;
}

static int x86_PUSHA(void) {
  {
   Bit16u old_sp=cpu_regs.regs[REGI_SP].word[0];
   CPU_Push16(cpu_regs.regs[REGI_AX].word[0]);CPU_Push16(cpu_regs.regs[REGI_CX].word[0]);CPU_Push16(cpu_regs.regs[REGI_DX].word[0]);CPU_Push16(cpu_regs.regs[REGI_BX].word[0]);
   CPU_Push16(old_sp);CPU_Push16(cpu_regs.regs[REGI_BP].word[0]);CPU_Push16(cpu_regs.regs[REGI_SI].word[0]);CPU_Push16(cpu_regs.regs[REGI_DI].word[0]);
  }
  return CASERET_BREAK;
}

static int x86_POPA(void) {
  cpu_regs.regs[REGI_DI].word[0]=CPU_Pop16();cpu_regs.regs[REGI_SI].word[0]=CPU_Pop16();cpu_regs.regs[REGI_BP].word[0]=CPU_Pop16();CPU_Pop16();
  cpu_regs.regs[REGI_BX].word[0]=CPU_Pop16();cpu_regs.regs[REGI_DX].word[0]=CPU_Pop16();cpu_regs.regs[REGI_CX].word[0]=CPU_Pop16();cpu_regs.regs[REGI_AX].word[0]=CPU_Pop16();
  return CASERET_BREAK;
}

static int x86_BOUND(void) {
  {
   Bit16s bound_min, bound_max;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;PhysPt eaa=(core.ea_table)[rm]();;
   bound_min=mem_readw(eaa);
   bound_max=mem_readw(eaa+2);
   if ( (((Bit16s)*rmrw) < bound_min) || (((Bit16s)*rmrw) > bound_max) ) {
    { CPU_Exception(5); return CASERET_CONTINUE; };
   }
  }
  return CASERET_BREAK;
}

static int x86_ARPL_Ew_Rw(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;Bitu new_sel=*earw;
    CPU_ARPL(new_sel,*rmrw);
    *earw=(Bit16u)new_sel;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bitu new_sel=mem_readw(eaa);
    CPU_ARPL(new_sel,*rmrw);
    mem_writew(eaa,(Bit16u)new_sel);
   }
  }
  return CASERET_BREAK;
}

static int x86_SEG_FS(void) {
  core.base_ds=SegPhys(fs); core.base_ss=SegPhys(fs); core.base_val_ds=fs; return CASERET_RESTART;;return CASERET_BREAK;
}

static int x86_SEG_GS(void) {
  core.base_ds=SegPhys(gs); core.base_ss=SegPhys(gs); core.base_val_ds=gs; return CASERET_RESTART;;return CASERET_BREAK;
}

static int x86_Operand_Size_Prefix(void) {
  core.opcode_index=(cpu.code.big^0x1)*0x200;
  return CASERET_RESTART;
}

static int x86_Address_Size_Prefix(void) {
  core.prefixes=(core.prefixes & ~0x1) | (cpu.code.big ^ 0x1); core.ea_table=&EATable[(core.prefixes&1) * 256]; return CASERET_RESTART;;
}

static int x86_PUSH_Iw(void) {
  CPU_Push16(Fetchw());return CASERET_BREAK;
}

static int x86_IMUL_Gw_Ew_Iw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bits res=((Bit16s)*earw) * ((Bit16s)Fetchws()); *rmrw=res & 0xffff; FillFlagsNoCFOF(); if ((res>= -32768) && (res<=32767)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits res=((Bit16s)mem_readw(eaa)) * ((Bit16s)Fetchws()); *rmrw=res & 0xffff; FillFlagsNoCFOF(); if ((res>= -32768) && (res<=32767)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
  return CASERET_BREAK;
}

static int x86_WPUSH_Ib(void) {
  CPU_Push16(Fetchbs());
  return CASERET_BREAK;
}

static int x86_IMUL_Gw_Ew_Ib(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bits res=((Bit16s)*earw) * ((Bit16s)Fetchbs()); *rmrw=res & 0xffff; FillFlagsNoCFOF(); if ((res>= -32768) && (res<=32767)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits res=((Bit16s)mem_readw(eaa)) * ((Bit16s)Fetchbs()); *rmrw=res & 0xffff; FillFlagsNoCFOF(); if ((res>= -32768) && (res<=32767)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
  return CASERET_BREAK;
}

static int x86_INSB(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],1)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  DoString(R_INSB);return CASERET_BREAK;
}

static int x86_INSW(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],2)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  DoString(R_INSW);return CASERET_BREAK;
}

static int x86_OUTSB(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],1)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  DoString(R_OUTSB);return CASERET_BREAK;
}

static int x86_OUTSW(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],2)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  DoString(R_OUTSW);return CASERET_BREAK;
}

static int x86_WJO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_OF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_OF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJZ(void) {
    { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF() || get_ZF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF() && !get_ZF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_SF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_SF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_PF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_PF())) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) != (get_OF()!=0))) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) == (get_OF()!=0))) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF() || ((get_SF()!=0) != (get_OF()!=0)))) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_WJNLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF() && ((get_SF()!=0) == (get_OF()!=0)))) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_Grpl_Eb_Ib(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm>= 0xc0) {
    Bit8u * earb=lookupRMEAregb[rm];;Bit8u ib=Fetchb();
    switch (which) {
    case 0x00:lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_ADDb;;break;
    case 0x01: lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_ORb;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; *earb=lflags.res.byte[0]; lflags.type=t_ADCb;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); *earb=lflags.res.byte[0]; lflags.type=t_SBBb;;break;
    case 0x04:lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_ANDb;;break;
    case 0x05:lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SUBb;;break;
    case 0x06:lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_XORb;;break;
    case 0x07:lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;;break;
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit8u ib=Fetchb();
    switch (which) {
    case 0x00:lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ADDb;;break;
    case 0x01: lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0] | lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ORb;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]+lflags.var2.byte[0]+lflags.oldcf; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ADCb;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]-(lflags.var2.byte[0]+lflags.oldcf); mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SBBb;;break;
    case 0x04:lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_ANDb;;break;
    case 0x05:lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SUBb;;break;
    case 0x06:lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0] ^ lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_XORb;;break;
    case 0x07:lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=ib; lflags.res.byte[0]=lflags.var1.byte[0]-lflags.var2.byte[0]; lflags.type=t_CMPb;;break;
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_Grpl_Ew_Iw(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm>= 0xc0) {
    Bit16u * earw=lookupRMEAregw[rm];;Bit16u iw=Fetchw();
    switch (which) {
    case 0x00:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ADDw;;break;
    case 0x01: lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ORw;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; *earw=lflags.res.word[0]; lflags.type=t_ADCw;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); *earw=lflags.res.word[0]; lflags.type=t_SBBw;;break;
    case 0x04:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ANDw;;break;
    case 0x05:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_SUBw;;break;
    case 0x06:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_XORw;;break;
    case 0x07:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;break;
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit16u iw=Fetchw();
    switch (which) {
    case 0x00:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ADDw;;break;
    case 0x01: lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ORw;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ADCw;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SBBw;;break;
    case 0x04:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ANDw;;break;
    case 0x05:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SUBw;;break;
    case 0x06:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_XORw;;break;
    case 0x07:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;break;
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_Grpl_Ew_Ix(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm>= 0xc0) {
    Bit16u * earw=lookupRMEAregw[rm];;Bit16u iw=(Bit16s)Fetchbs();
    switch (which) {
    case 0x00:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ADDw;;break;
    case 0x01: lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ORw;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; *earw=lflags.res.word[0]; lflags.type=t_ADCw;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); *earw=lflags.res.word[0]; lflags.type=t_SBBw;;break;
    case 0x04:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_ANDw;;break;
    case 0x05:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_SUBw;;break;
    case 0x06:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; *earw=lflags.res.word[0]; lflags.type=t_XORw;;break;
    case 0x07:lflags.var1.word[0]=*earw;lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;break;
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit16u iw=(Bit16s)Fetchbs();
    switch (which) {
    case 0x00:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ADDw;;break;
    case 0x01: lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] | lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ORw;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]+lflags.var2.word[0]+lflags.oldcf; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ADCw;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-(lflags.var2.word[0]+lflags.oldcf); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SBBw;;break;
    case 0x04:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_ANDw;;break;
    case 0x05:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SUBw;;break;
    case 0x06:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0] ^ lflags.var2.word[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_XORw;;break;
    case 0x07:lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=iw; lflags.res.word[0]=lflags.var1.word[0]-lflags.var2.word[0]; lflags.type=t_CMPw;;break;
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_TEST_Eb_Gb(void) {
  { Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; lflags.type=t_TESTb;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=*rmrb; lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; lflags.type=t_TESTb;;} };
  return CASERET_BREAK;
}

static int x86_TEST_Ew_Gw(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; lflags.type=t_TESTw;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=*rmrw; lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; lflags.type=t_TESTw;;} };
  return CASERET_BREAK;
}

static int x86_XCHG_Eb_Gb(void) {
  {
   Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;;Bit8u oldrmrb=*rmrb;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrb=*earb;*earb=oldrmrb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrb=mem_readb(eaa);mem_writeb(eaa,oldrmrb);}
   return CASERET_BREAK;
  }
}

static int x86_XCHG_Ew_Gw(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;Bit16u oldrmrw=*rmrw;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*rmrw=*earw;*earw=oldrmrw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrw=mem_readw(eaa);mem_writew(eaa,oldrmrw);}
   return CASERET_BREAK;
  }
}

static int x86_MOV_Eb_Gb(void) {
  {
   Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=*rmrb;}
   else {
    if (cpu.pmode) {
     if (__builtin_expect(((rm==0x05) && (!cpu.code.big)),0)) {
      Descriptor desc;
      cpu.gdt.GetDescriptor(SegValue(core.base_val_ds),desc);
      if ((desc.Type()==0x1a) || (desc.Type()==0x1b)) {
       CPU_Exception(13,SegValue(core.base_val_ds) & 0xfffc);
       return CASERET_CONTINUE;
      }
     }
    }
    PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,*rmrb);
   }
   return CASERET_BREAK;
  }
}

static int x86_MOV_Ew_Gw(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*earw=*rmrw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,*rmrw);}
   return CASERET_BREAK;
  }
}

static int x86_MOV_Gb_Eb(void) {
  {
   Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrb=*earb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrb=mem_readb(eaa);}
   return CASERET_BREAK;
  }
}

static int x86_MOV_Gw_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*rmrw=*earw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrw=mem_readw(eaa);}
   return CASERET_BREAK;
  }
}

static int x86_WMov_Ew_Sw(void) {
  {
   Bit8u rm=Fetchb();;Bit16u val;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
    val=SegValue(es);break;
   case 0x01:
    val=SegValue(cs);break;
   case 0x02:
    val=SegValue(ss);break;
   case 0x03:
    val=SegValue(ds);break;
   case 0x04:
    val=SegValue(fs);break;
   case 0x05:
    val=SegValue(gs);break;
   default:
    LOG(LOG_CPU,LOG_ERROR)("CPU:8c:Illegal RM Byte");
    return CASERET_ILLEGAL;
   }
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*earw=val;}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,val);}
   return CASERET_BREAK;
  }
}

static int x86_LEA_Gw(void) {
  {

   core.base_ds=core.base_ss=0;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if ((core.prefixes & 0x1)) {
    *rmrw=(Bit16u)(*EATable[256+rm])();
   } else {
    *rmrw=(Bit16u)(*EATable[rm])();
   }
   return CASERET_BREAK;
  }
}

static int x86_MOV_Sw_Ew(void) {
  {
   Bit8u rm=Fetchb();;Bit16u val;Bitu which=(rm>>3)&7;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;val=*earw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;val=mem_readw(eaa);}
   switch (which) {
   case 0x02:
    CPU_Cycles++;
   case 0x00:
   case 0x03:
   case 0x05:
   case 0x04:
    if (CPU_SetSegGeneral((SegNames)which,val)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
    break;
   default:
    return CASERET_ILLEGAL;
   }
   return CASERET_BREAK;
  }
}

static int x86_POP_Ew(void) {
  {
   Bit16u val=CPU_Pop16();
   Bit8u rm=Fetchb();;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*earw=val;}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,val);}
   return CASERET_BREAK;
  }
}

static int x86_NOP(void) {
  return CASERET_BREAK;
}

static int x86_XCHG_CX_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_CX].word[0];cpu_regs.regs[REGI_CX].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_XCHG_DX_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_DX].word[0];cpu_regs.regs[REGI_DX].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_XCHG_BX_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_BX].word[0];cpu_regs.regs[REGI_BX].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_XCHG_SP_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_SP].word[0];cpu_regs.regs[REGI_SP].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_XCHG_BP_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_BP].word[0];cpu_regs.regs[REGI_BP].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_XCHG_SI_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_SI].word[0];cpu_regs.regs[REGI_SI].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_XCHG_DI_AX(void) {
  { Bit16u temp=cpu_regs.regs[REGI_AX].word[0];cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_DI].word[0];cpu_regs.regs[REGI_DI].word[0]=temp; }
  return CASERET_BREAK;
}

static int x86_CBW(void) {
  cpu_regs.regs[REGI_AX].word[0]=(Bit8s)cpu_regs.regs[REGI_AX].byte[0];return CASERET_BREAK;
}

static int x86_CWD(void) {
  if (cpu_regs.regs[REGI_AX].word[0] & 0x8000) cpu_regs.regs[REGI_DX].word[0]=0xffff;else cpu_regs.regs[REGI_DX].word[0]=0;
  return CASERET_BREAK;
}

static int x86_CALL_Ap(void) {
  {
   FillFlags();
   Bit16u newip=Fetchw();Bit16u newcs=Fetchw();
   CPU_CALL(false,newcs,newip,(core.cseip-SegPhys(cs)));

   if ((cpu_regs.flags & 0x00000100)) {
    cpudecoder=CPU_Core_Normal_Trap_Run;
    return CBRET_NONE;
   }

   return CASERET_CONTINUE;
  }
}

static int x86_PUSHF(void) {
  if (CPU_PUSHF(false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_POPF(void) {
  if (CPU_POPF(false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };

  if ((cpu_regs.flags & 0x00000100)) {
   cpudecoder=CPU_Core_Normal_Trap_Run;
   return CASERET_END;
  }


  if ((cpu_regs.flags & 0x00000200) && PIC_IRQCheck) return CASERET_END;

  return CASERET_BREAK;
}

static int x86_SAHF(void) {
  { if (get_OF()) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; lflags.type=t_UNKNOWN; CPU_SetFlags(cpu_regs.regs[REGI_AX].byte[1],((0x00000001 | 0x00000004 | 0x00000010 | 0x00000040 | 0x00000080 | 0x00000800) | 0x00000400 | 0x00000100 | 0x00000200 ) & 0xff); };
  return CASERET_BREAK;
}

static int x86_LAHF(void) {
  FillFlags();
  cpu_regs.regs[REGI_AX].byte[1]=cpu_regs.flags&0xff;
  return CASERET_BREAK;
}

static int x86_MOV_AL_Ob(void) {
  {
   PhysPt eaa; if ((core.prefixes & 0x1)) { eaa=core.base_ds+Fetchd(); } else { eaa=core.base_ds+Fetchw(); };
   cpu_regs.regs[REGI_AX].byte[0]=mem_readb(eaa);
  }
  return CASERET_BREAK;
}

static int x86_MOV_AX_Ow(void) {
  {
   PhysPt eaa; if ((core.prefixes & 0x1)) { eaa=core.base_ds+Fetchd(); } else { eaa=core.base_ds+Fetchw(); };
   cpu_regs.regs[REGI_AX].word[0]=mem_readw(eaa);
  }
  return CASERET_BREAK;
}

static int x86_MOV_Ob_AL(void) {
  {
   PhysPt eaa; if ((core.prefixes & 0x1)) { eaa=core.base_ds+Fetchd(); } else { eaa=core.base_ds+Fetchw(); };
   mem_writeb(eaa,cpu_regs.regs[REGI_AX].byte[0]);
  }
  return CASERET_BREAK;
}

static int x86_MOV_Ow_AX(void) {
  {
   PhysPt eaa; if ((core.prefixes & 0x1)) { eaa=core.base_ds+Fetchd(); } else { eaa=core.base_ds+Fetchw(); };
   mem_writew(eaa,cpu_regs.regs[REGI_AX].word[0]);
  }
  return CASERET_BREAK;
}

static int x86_MOVSB(void) {
  DoString(R_MOVSB);return CASERET_BREAK;
}

static int x86_MOVSW(void) {
  DoString(R_MOVSW);return CASERET_BREAK;
}

static int x86_CMPSB(void) {
  DoString(R_CMPSB);return CASERET_BREAK;
}

static int x86_CMPSW(void) {
  DoString(R_CMPSW);return CASERET_BREAK;
}

static int x86_TEST_AL_Ib(void) {
  { lflags.var1.byte[0]=cpu_regs.regs[REGI_AX].byte[0];lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; lflags.type=t_TESTb;};return CASERET_BREAK;
}

static int x86_TEST_AX_Iw(void) {
  { lflags.var1.word[0]=cpu_regs.regs[REGI_AX].word[0];lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; lflags.type=t_TESTw;;};return CASERET_BREAK;
}

static int x86_STOSB(void) {
  DoString(R_STOSB);return CASERET_BREAK;
}

static int x86_STOSW(void) {
  DoString(R_STOSW);return CASERET_BREAK;
}

static int x86_LODSB(void) {
  DoString(R_LODSB);return CASERET_BREAK;
}

static int x86_LODSW(void) {
  DoString(R_LODSW);return CASERET_BREAK;
}

static int x86_SCASB(void) {
  DoString(R_SCASB);return CASERET_BREAK;
}

static int x86_SCASW(void) {
  DoString(R_SCASW);return CASERET_BREAK;
}

static int x86_MOV_AL_Ib(void) {
  cpu_regs.regs[REGI_AX].byte[0]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_CL_Ib(void) {
  cpu_regs.regs[REGI_CX].byte[0]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_DL_Ib(void) {
  cpu_regs.regs[REGI_DX].byte[0]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_BL_Ib(void) {
  cpu_regs.regs[REGI_BX].byte[0]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_AH_Ib(void) {
  cpu_regs.regs[REGI_AX].byte[1]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_CH_Ib(void) {
  cpu_regs.regs[REGI_CX].byte[1]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_DH_Ib(void) {
  cpu_regs.regs[REGI_DX].byte[1]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_BH_Ib(void) {
  cpu_regs.regs[REGI_BX].byte[1]=Fetchb();return CASERET_BREAK;
}

static int x86_MOV_AX_Iw(void) {
  cpu_regs.regs[REGI_AX].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_CX_Iw(void) {
  cpu_regs.regs[REGI_CX].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_DX_Iw(void) {
  cpu_regs.regs[REGI_DX].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_BX_Iw(void) {
  cpu_regs.regs[REGI_BX].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_SP_Iw(void) {
  cpu_regs.regs[REGI_SP].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_BP_Iw(void) {
  cpu_regs.regs[REGI_BP].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_SI_Iw(void) {
  cpu_regs.regs[REGI_SI].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_MOV_DI_Iw(void) {
  cpu_regs.regs[REGI_DI].word[0]=Fetchw();return CASERET_BREAK;
}

static int x86_GRP2_Eb_Ib(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit8u * earb=lookupRMEAregb[rm];; Bit8u val=Fetchb() & 0x1f; switch (which) { case 0x00:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (*earb & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earb & 1) ^ (*earb >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (lflags.var1.byte[0] >> (8-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (lflags.res.byte[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (*earb>>7) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earb>>7) ^ ((*earb>>6) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (lflags.var1.byte[0] << (8-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (lflags.res.byte[0] & 0x80) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%9)) break; { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.byte[0] >> (9-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (((lflags.var1.byte[0] >> (8-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%9) { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (cf << (8-lflags.var2.byte[0])) | (lflags.var1.byte[0] << (9-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if ((lflags.var1.byte[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] << lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SHLb;;break; case 0x05:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SHRb;;break; case 0x07:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>8) lflags.var2.byte[0]=8; if (lflags.var1.byte[0] & 0x80) { lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0])| (0xff << (8 - lflags.var2.byte[0])); } else { lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; } *earb=lflags.res.byte[0]; lflags.type=t_SARb;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=Fetchb() & 0x1f; switch (which) { case 0x00:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (eaa & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa & 1) ^ (eaa >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (lflags.var1.byte[0] >> (8-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (lflags.res.byte[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (eaa>>7) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa>>7) ^ ((eaa>>6) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (lflags.var1.byte[0] << (8-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (lflags.res.byte[0] & 0x80) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%9)) break; { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.byte[0] >> (9-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (((lflags.var1.byte[0] >> (8-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%9) { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (cf << (8-lflags.var2.byte[0])) | (lflags.var1.byte[0] << (9-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if ((lflags.var1.byte[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] << lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SHLb;;break; case 0x05:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SHRb;;break; case 0x07:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>8) lflags.var2.byte[0]=8; if (lflags.var1.byte[0] & 0x80) { lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0])| (0xff << (8 - lflags.var2.byte[0])); } else { lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; } mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SARb;;break; } } };return CASERET_BREAK;
}

static int x86_GRP2_Ew_Ib(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit16u * earw=lookupRMEAregw[rm];; Bit8u val=Fetchb() & 0x1f; switch (which) { case 0x00:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (*earw & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earw & 1) ^ (*earw >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (lflags.var1.word[0] >> (16-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (lflags.res.word[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (*earw>>15) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earw>>15) ^ ((*earw>>14) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (lflags.var1.word[0] << (16-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (lflags.res.word[0] & 0x8000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%17)) break; { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.word[0] >> (17-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (((lflags.var1.word[0] >> (16-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%17) { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (cf << (16-lflags.var2.byte[0])) | (lflags.var1.word[0] << (17-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if ((lflags.var1.word[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val ; lflags.res.word[0]=lflags.var1.word[0] << lflags.var2.byte[0]; *earw=lflags.res.word[0]; lflags.type=t_SHLw;;break; case 0x05:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val; lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; *earw=lflags.res.word[0]; lflags.type=t_SHRw;;break; case 0x07:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>16) lflags.var2.byte[0]=16; if (lflags.var1.word[0] & 0x8000) { lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0])| (0xffff << (16 - lflags.var2.byte[0])); } else { lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; } *earw=lflags.res.word[0]; lflags.type=t_SARw;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=Fetchb() & 0x1f; switch (which) { case 0x00:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (eaa & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa & 1) ^ (eaa >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (lflags.var1.word[0] >> (16-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (lflags.res.word[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (eaa>>15) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa>>15) ^ ((eaa>>14) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (lflags.var1.word[0] << (16-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (lflags.res.word[0] & 0x8000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%17)) break; { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.word[0] >> (17-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (((lflags.var1.word[0] >> (16-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%17) { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (cf << (16-lflags.var2.byte[0])) | (lflags.var1.word[0] << (17-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if ((lflags.var1.word[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val ; lflags.res.word[0]=lflags.var1.word[0] << lflags.var2.byte[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SHLw;;break; case 0x05:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val; lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SHRw;;break; case 0x07:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>16) lflags.var2.byte[0]=16; if (lflags.var1.word[0] & 0x8000) { lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0])| (0xffff << (16 - lflags.var2.byte[0])); } else { lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; } mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SARw;;break; } } };return CASERET_BREAK;
}

static int x86_WRETN_Iw(void) {
  cpu_regs.ip.dword[0]=CPU_Pop16();
  cpu_regs.regs[REGI_SP].dword[0]+=Fetchw();
  return CASERET_CONTINUE;
}

static int x86_WRETN(void) {
  cpu_regs.ip.dword[0]=CPU_Pop16();
  return CASERET_CONTINUE;
}

static int x86_WLES(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(es,mem_readw(eaa+2))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrw=mem_readw(eaa);
   return CASERET_BREAK;
  }
}

static int x86_WLDS(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(ds,mem_readw(eaa+2))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrw=mem_readw(eaa);
   return CASERET_BREAK;
  }
}

static int x86_MOV_Eb_Ib(void) {
  {
   Bit8u rm=Fetchb();;
   if (rm >= 0xc0) {Bit8u * earb=lookupRMEAregb[rm];;*earb=Fetchb();}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,Fetchb());}
   return CASERET_BREAK;
  }
}

static int x86_MOV_EW_Iw(void) {
  {
   Bit8u rm=Fetchb();;
   if (rm >= 0xc0) {Bit16u * earw=lookupRMEAregw[rm];;*earw=Fetchw();}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,Fetchw());}
   return CASERET_BREAK;
  }
}

static int x86_WENTER_Iw_Ib(void) {
  {
   Bitu bytes=Fetchw();
   Bitu level=Fetchb();
   CPU_ENTER(false,bytes,level);
  }
  return CASERET_BREAK;
}

static int x86_WLEAVE(void) {
  cpu_regs.regs[REGI_SP].dword[0]&=cpu.stack.notmask;
  cpu_regs.regs[REGI_SP].dword[0]|=(cpu_regs.regs[REGI_BP].dword[0]&cpu.stack.mask);
  cpu_regs.regs[REGI_BP].word[0]=CPU_Pop16();
  return CASERET_BREAK;
}

static int x86_WRETF_Iw(void) {
  {
   Bitu words=Fetchw();
   FillFlags();
   CPU_RET(false,words,(core.cseip-SegPhys(cs)));
   return CASERET_CONTINUE;
  }
}

static int x86_WRETF(void) {
  FillFlags();
  CPU_RET(false,0,(core.cseip-SegPhys(cs)));
  return CASERET_CONTINUE;
}

static int x86_INT3(void) {
  CPU_SW_Interrupt_NoIOPLCheck(3,(core.cseip-SegPhys(cs)));

  cpu.trap_skip=true;

  return CASERET_CONTINUE;
}

static int x86_INT_Ib(void) {
  {
   Bit8u num=Fetchb();






   CPU_SW_Interrupt(num,(core.cseip-SegPhys(cs)));

   cpu.trap_skip=true;

   return CASERET_CONTINUE;
  }
}

static int x86_INTO(void) {
  if (get_OF()) {
   CPU_SW_Interrupt(4,(core.cseip-SegPhys(cs)));

   cpu.trap_skip=true;

   return CASERET_CONTINUE;
  }
  return CASERET_BREAK;
}

static int x86_WIRET(void) {
  {
   CPU_IRET(false,(core.cseip-SegPhys(cs)));

   if ((cpu_regs.flags & 0x00000100)) {
    cpudecoder=CPU_Core_Normal_Trap_Run;
    return CBRET_NONE;
   }


   if ((cpu_regs.flags & 0x00000200) && PIC_IRQCheck) return CBRET_NONE;

   return CASERET_CONTINUE;
  }
}

static int x86_GRP2_Eb_1(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit8u * earb=lookupRMEAregb[rm];; Bit8u val=1 & 0x1f; switch (which) { case 0x00:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (*earb & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earb & 1) ^ (*earb >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (lflags.var1.byte[0] >> (8-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (lflags.res.byte[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (*earb>>7) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earb>>7) ^ ((*earb>>6) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (lflags.var1.byte[0] << (8-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (lflags.res.byte[0] & 0x80) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%9)) break; { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.byte[0] >> (9-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (((lflags.var1.byte[0] >> (8-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%9) { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (cf << (8-lflags.var2.byte[0])) | (lflags.var1.byte[0] << (9-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if ((lflags.var1.byte[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] << lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SHLb;;break; case 0x05:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SHRb;;break; case 0x07:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>8) lflags.var2.byte[0]=8; if (lflags.var1.byte[0] & 0x80) { lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0])| (0xff << (8 - lflags.var2.byte[0])); } else { lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; } *earb=lflags.res.byte[0]; lflags.type=t_SARb;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=1 & 0x1f; switch (which) { case 0x00:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (eaa & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa & 1) ^ (eaa >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (lflags.var1.byte[0] >> (8-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (lflags.res.byte[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (eaa>>7) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa>>7) ^ ((eaa>>6) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (lflags.var1.byte[0] << (8-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (lflags.res.byte[0] & 0x80) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%9)) break; { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.byte[0] >> (9-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (((lflags.var1.byte[0] >> (8-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%9) { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (cf << (8-lflags.var2.byte[0])) | (lflags.var1.byte[0] << (9-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if ((lflags.var1.byte[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] << lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SHLb;;break; case 0x05:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SHRb;;break; case 0x07:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>8) lflags.var2.byte[0]=8; if (lflags.var1.byte[0] & 0x80) { lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0])| (0xff << (8 - lflags.var2.byte[0])); } else { lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; } mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SARb;;break; } } };return CASERET_BREAK;
}

static int x86_GRP2_Ew_1(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit16u * earw=lookupRMEAregw[rm];; Bit8u val=1 & 0x1f; switch (which) { case 0x00:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (*earw & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earw & 1) ^ (*earw >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (lflags.var1.word[0] >> (16-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (lflags.res.word[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (*earw>>15) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earw>>15) ^ ((*earw>>14) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (lflags.var1.word[0] << (16-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (lflags.res.word[0] & 0x8000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%17)) break; { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.word[0] >> (17-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (((lflags.var1.word[0] >> (16-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%17) { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (cf << (16-lflags.var2.byte[0])) | (lflags.var1.word[0] << (17-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if ((lflags.var1.word[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val ; lflags.res.word[0]=lflags.var1.word[0] << lflags.var2.byte[0]; *earw=lflags.res.word[0]; lflags.type=t_SHLw;;break; case 0x05:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val; lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; *earw=lflags.res.word[0]; lflags.type=t_SHRw;;break; case 0x07:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>16) lflags.var2.byte[0]=16; if (lflags.var1.word[0] & 0x8000) { lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0])| (0xffff << (16 - lflags.var2.byte[0])); } else { lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; } *earw=lflags.res.word[0]; lflags.type=t_SARw;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=1 & 0x1f; switch (which) { case 0x00:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (eaa & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa & 1) ^ (eaa >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (lflags.var1.word[0] >> (16-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (lflags.res.word[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (eaa>>15) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa>>15) ^ ((eaa>>14) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (lflags.var1.word[0] << (16-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (lflags.res.word[0] & 0x8000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%17)) break; { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.word[0] >> (17-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (((lflags.var1.word[0] >> (16-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%17) { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (cf << (16-lflags.var2.byte[0])) | (lflags.var1.word[0] << (17-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if ((lflags.var1.word[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val ; lflags.res.word[0]=lflags.var1.word[0] << lflags.var2.byte[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SHLw;;break; case 0x05:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val; lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SHRw;;break; case 0x07:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>16) lflags.var2.byte[0]=16; if (lflags.var1.word[0] & 0x8000) { lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0])| (0xffff << (16 - lflags.var2.byte[0])); } else { lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; } mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SARw;;break; } } };return CASERET_BREAK;
}

static int x86_GRP2_Eb_CL(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit8u * earb=lookupRMEAregb[rm];; Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1f; switch (which) { case 0x00:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (*earb & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earb & 1) ^ (*earb >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (lflags.var1.byte[0] >> (8-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (lflags.res.byte[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (*earb>>7) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earb>>7) ^ ((*earb>>6) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (lflags.var1.byte[0] << (8-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (lflags.res.byte[0] & 0x80) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%9)) break; { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.byte[0] >> (9-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if (((lflags.var1.byte[0] >> (8-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%9) { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=*earb; lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (cf << (8-lflags.var2.byte[0])) | (lflags.var1.byte[0] << (9-lflags.var2.byte[0])); *earb=lflags.res.byte[0]; if ((lflags.var1.byte[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] << lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SHLb;;break; case 0x05:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; *earb=lflags.res.byte[0]; lflags.type=t_SHRb;;break; case 0x07:if (!val) break; lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>8) lflags.var2.byte[0]=8; if (lflags.var1.byte[0] & 0x80) { lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0])| (0xff << (8 - lflags.var2.byte[0])); } else { lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; } *earb=lflags.res.byte[0]; lflags.type=t_SARb;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1f; switch (which) { case 0x00:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (eaa & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa & 1) ^ (eaa >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (lflags.var1.byte[0] >> (8-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (lflags.res.byte[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0x7)) { if (val&0x18) { FillFlagsNoCFOF(); if (eaa>>7) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa>>7) ^ ((eaa>>6) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val&0x07; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (lflags.var1.byte[0] << (8-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (lflags.res.byte[0] & 0x80) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%9)) break; { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.byte[0] >> (9-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if (((lflags.var1.byte[0] >> (8-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.byte[0] >> 7)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%9) { Bit8u cf=(Bit8u)FillFlags()&0x1; lflags.var1.byte[0]=mem_readb(eaa); lflags.var2.byte[0]=val%9; lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0]) | (cf << (8-lflags.var2.byte[0])) | (lflags.var1.byte[0] << (9-lflags.var2.byte[0])); mem_writeb(eaa,lflags.res.byte[0]); if ((lflags.var1.byte[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.byte[0] ^ (lflags.res.byte[0]<<1)) & 0x80) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] << lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SHLb;;break; case 0x05:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SHRb;;break; case 0x07:if (!val) break; lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>8) lflags.var2.byte[0]=8; if (lflags.var1.byte[0] & 0x80) { lflags.res.byte[0]=(lflags.var1.byte[0] >> lflags.var2.byte[0])| (0xff << (8 - lflags.var2.byte[0])); } else { lflags.res.byte[0]=lflags.var1.byte[0] >> lflags.var2.byte[0]; } mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_SARb;;break; } } };return CASERET_BREAK;
}

static int x86_GRP2_Ew_CL(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit16u * earw=lookupRMEAregw[rm];; Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1f; switch (which) { case 0x00:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (*earw & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earw & 1) ^ (*earw >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (lflags.var1.word[0] >> (16-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (lflags.res.word[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (*earw>>15) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((*earw>>15) ^ ((*earw>>14) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (lflags.var1.word[0] << (16-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (lflags.res.word[0] & 0x8000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%17)) break; { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.word[0] >> (17-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if (((lflags.var1.word[0] >> (16-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%17) { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=*earw; lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (cf << (16-lflags.var2.byte[0])) | (lflags.var1.word[0] << (17-lflags.var2.byte[0])); *earw=lflags.res.word[0]; if ((lflags.var1.word[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val ; lflags.res.word[0]=lflags.var1.word[0] << lflags.var2.byte[0]; *earw=lflags.res.word[0]; lflags.type=t_SHLw;;break; case 0x05:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val; lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; *earw=lflags.res.word[0]; lflags.type=t_SHRw;;break; case 0x07:if (!val) break; lflags.var1.word[0]=*earw;lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>16) lflags.var2.byte[0]=16; if (lflags.var1.word[0] & 0x8000) { lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0])| (0xffff << (16 - lflags.var2.byte[0])); } else { lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; } *earw=lflags.res.word[0]; lflags.type=t_SARw;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1f; switch (which) { case 0x00:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (eaa & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa & 1) ^ (eaa >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (lflags.var1.word[0] >> (16-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (lflags.res.word[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!(val&0xf)) { if (val&0x10) { FillFlagsNoCFOF(); if (eaa>>15) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((eaa>>15) ^ ((eaa>>14) & 1)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } break; } FillFlagsNoCFOF(); lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val&0xf; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (lflags.var1.word[0] << (16-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (lflags.res.word[0] & 0x8000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!(val%17)) break; { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.word[0] >> (17-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if (((lflags.var1.word[0] >> (16-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.word[0] >> 15)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val%17) { Bit16u cf=(Bit16u)FillFlags()&0x1; lflags.var1.word[0]=mem_readw(eaa); lflags.var2.byte[0]=val%17; lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0]) | (cf << (16-lflags.var2.byte[0])) | (lflags.var1.word[0] << (17-lflags.var2.byte[0])); mem_writew(eaa,lflags.res.word[0]); if ((lflags.var1.word[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.word[0] ^ (lflags.res.word[0]<<1)) & 0x8000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val ; lflags.res.word[0]=lflags.var1.word[0] << lflags.var2.byte[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SHLw;;break; case 0x05:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val; lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SHRw;;break; case 0x07:if (!val) break; lflags.var1.word[0]=mem_readw(eaa);lflags.var2.byte[0]=val; if (lflags.var2.byte[0]>16) lflags.var2.byte[0]=16; if (lflags.var1.word[0] & 0x8000) { lflags.res.word[0]=(lflags.var1.word[0] >> lflags.var2.byte[0])| (0xffff << (16 - lflags.var2.byte[0])); } else { lflags.res.word[0]=lflags.var1.word[0] >> lflags.var2.byte[0]; } mem_writew(eaa,lflags.res.word[0]); lflags.type=t_SARw;;break; } } };return CASERET_BREAK;
}

static int x86_AAM_Ib(void) {
  { Bit8u dv=Fetchb(); if (dv!=0) { cpu_regs.regs[REGI_AX].byte[1]=cpu_regs.regs[REGI_AX].byte[0] / dv; cpu_regs.regs[REGI_AX].byte[0]=cpu_regs.regs[REGI_AX].byte[0] % dv; if ((cpu_regs.regs[REGI_AX].byte[0] & 0x80)) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; if ((cpu_regs.regs[REGI_AX].byte[0] == 0)) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (parity_lookup[cpu_regs.regs[REGI_AX].byte[0]]) cpu_regs.flags|=0x00000004; else cpu_regs.flags&=~0x00000004; if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if (false) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; lflags.type=t_UNKNOWN; } else { CPU_Exception(0); return CASERET_CONTINUE; }; };return CASERET_BREAK;
}

static int x86_AAD_Ib(void) {
  { Bit16u ax1 = cpu_regs.regs[REGI_AX].byte[1] * Fetchb(); Bit16u ax2 = ax1 + cpu_regs.regs[REGI_AX].byte[0]; cpu_regs.regs[REGI_AX].byte[0] = (Bit8u) ax2; cpu_regs.regs[REGI_AX].byte[1] = 0; if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; if (false) cpu_regs.flags|=0x00000010; else cpu_regs.flags&=~0x00000010; if (cpu_regs.regs[REGI_AX].byte[0] >= 0x80) cpu_regs.flags|=0x00000080; else cpu_regs.flags&=~0x00000080; if (cpu_regs.regs[REGI_AX].byte[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (parity_lookup[cpu_regs.regs[REGI_AX].byte[0]]) cpu_regs.flags|=0x00000004; else cpu_regs.flags&=~0x00000004; lflags.type=t_UNKNOWN; };return CASERET_BREAK;
}

static int x86_SALC(void) {
  cpu_regs.regs[REGI_AX].byte[0] = get_CF() ? 0xFF : 0;
  return CASERET_BREAK;
}

static int x86_XLAT(void) {
  if ((core.prefixes & 0x1)) {
   cpu_regs.regs[REGI_AX].byte[0]=mem_readb(core.base_ds+(Bit32u)(cpu_regs.regs[REGI_BX].dword[0]+cpu_regs.regs[REGI_AX].byte[0]));
  } else {
   cpu_regs.regs[REGI_AX].byte[0]=mem_readb(core.base_ds+(Bit16u)(cpu_regs.regs[REGI_BX].word[0]+cpu_regs.regs[REGI_AX].byte[0]));
  }
  return CASERET_BREAK;
}

static int x86_FPU_ESC_0(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC0_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC0_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_1(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC1_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC1_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_2(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC2_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC2_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_3(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC3_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC3_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_4(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC4_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC4_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_5(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC5_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC5_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_6(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC6_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC6_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_FPU_ESC_7(void) {
   { Bit8u rm=Fetchb(); if (rm >= 0xc0) { FPU_ESC7_Normal(rm); } else { PhysPt eaa=(core.ea_table)[rm]();;FPU_ESC7_EA(rm,eaa); } };return CASERET_BREAK;
}

static int x86_WLOOPNZ(void) {
  if ((core.prefixes & 0x1)) {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].dword[0] && !get_ZF()) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  } else {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].word[0] && !get_ZF()) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_WLOOPZ(void) {
  if ((core.prefixes & 0x1)) {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].dword[0] && get_ZF()) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  } else {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].word[0] && get_ZF()) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_WLOOP(void) {
  if ((core.prefixes & 0x1)) {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].dword[0]) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  } else {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].word[0]) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_WJCXZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (!(cpu_regs.regs[REGI_CX].dword[0] & AddrMaskTable[core.prefixes& 0x1])) cpu_regs.ip.word[0]+=Fetchbs(); cpu_regs.ip.word[0]+=1; return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_IN_AL_Ib(void) {
  {
   Bitu port=Fetchb();
   if (CPU_IO_Exception(port,1)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   cpu_regs.regs[REGI_AX].byte[0]=IO_ReadB(port);
   return CASERET_BREAK;
  }
}

static int x86_IN_AX_Ib(void) {
  {
   Bitu port=Fetchb();
   if (CPU_IO_Exception(port,2)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   cpu_regs.regs[REGI_AX].word[0]=IO_ReadW(port);
   return CASERET_BREAK;
  }
}

static int x86_OUT_Ib_AL(void) {
  {
   Bitu port=Fetchb();
   if (CPU_IO_Exception(port,1)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   IO_WriteB(port,cpu_regs.regs[REGI_AX].byte[0]);
   return CASERET_BREAK;
  }
}

static int x86_OUT_Ib_AX(void) {
  {
   Bitu port=Fetchb();
   if (CPU_IO_Exception(port,2)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   IO_WriteW(port,cpu_regs.regs[REGI_AX].word[0]);
   return CASERET_BREAK;
  }
}

static int x86_CALL_Jw(void) {
  {
   Bit16u addip=Fetchws();
   cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
   CPU_Push16(cpu_regs.ip.dword[0]);
   cpu_regs.ip.dword[0]=(Bit16u)(cpu_regs.ip.dword[0]+addip);
   return CASERET_CONTINUE;
  }
}

static int x86_JMP_Jw(void) {
  {
   Bit16u addip=Fetchws();
   cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
   cpu_regs.ip.dword[0]=(Bit16u)(cpu_regs.ip.dword[0]+addip);
   return CASERET_CONTINUE;
  }
}

static int x86_JMP_Ap(void) {
  {
   Bit16u newip=Fetchw();
   Bit16u newcs=Fetchw();
   FillFlags();
   CPU_JMP(false,newcs,newip,(core.cseip-SegPhys(cs)));

   if ((cpu_regs.flags & 0x00000100)) {
    cpudecoder=CPU_Core_Normal_Trap_Run;
    return CBRET_NONE;
   }

   return CASERET_CONTINUE;
  }
}

static int x86_WJMP_Jb(void) {
  {
   Bit16s addip=Fetchbs();
   cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
   cpu_regs.ip.dword[0]=(Bit16u)(cpu_regs.ip.dword[0]+addip);
   return CASERET_CONTINUE;
  }
}

static int x86_IN_AL_DX(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],1)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  cpu_regs.regs[REGI_AX].byte[0]=IO_ReadB(cpu_regs.regs[REGI_DX].word[0]);
  return CASERET_BREAK;
}

static int x86_IN_AX_DX(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],2)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  cpu_regs.regs[REGI_AX].word[0]=IO_ReadW(cpu_regs.regs[REGI_DX].word[0]);
  return CASERET_BREAK;
}

static int x86_OUT_DX_AL(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],1)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  IO_WriteB(cpu_regs.regs[REGI_DX].word[0],cpu_regs.regs[REGI_AX].byte[0]);
  return CASERET_BREAK;
}

static int x86_OUT_DX_AX(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],2)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  IO_WriteW(cpu_regs.regs[REGI_DX].word[0],cpu_regs.regs[REGI_AX].word[0]);
  return CASERET_BREAK;
}

static int x86_LOCK(void) {
  LOG(LOG_CPU,LOG_NORMAL)("CPU:LOCK");
  return CASERET_BREAK;
}

static int x86_ICEBP(void) {
  CPU_SW_Interrupt_NoIOPLCheck(1,(core.cseip-SegPhys(cs)));

  cpu.trap_skip=true;

  return CASERET_CONTINUE;
}

static int x86_REPNZ(void) {
  core.prefixes|=0x2; core.rep_zero=false; return CASERET_RESTART;;
  return CASERET_BREAK;
}

static int x86_REPZ(void) {
  core.prefixes|=0x2; core.rep_zero=true; return CASERET_RESTART;;
  return CASERET_BREAK;
}

static int x86_HLT(void) {
  if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
  FillFlags();
  CPU_HLT((core.cseip-SegPhys(cs)));
  return CBRET_NONE;
}

static int x86_CMC(void) {
  FillFlags();
  if (!(cpu_regs.flags & 0x00000001)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
  return CASERET_BREAK;
}

static int x86_GRP3_Eb_Ib(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
   case 0x01:
    {
     if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; lflags.type=t_TESTb;}
     else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.var2.byte[0]=Fetchb(); lflags.res.byte[0]=lflags.var1.byte[0] & lflags.var2.byte[0]; lflags.type=t_TESTb;;}
     break;
    }
   case 0x02:
    {
     if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=~*earb;}
     else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,~mem_readb(eaa));}
     break;
    }
   case 0x03:
    {
     lflags.type=t_NEGb;
     if (rm >= 0xc0 ) {
      Bit8u * earb=lookupRMEAregb[rm];;lflags.var1.byte[0]=*earb;lflags.res.byte[0]=0-lflags.var1.byte[0];
      *earb=lflags.res.byte[0];
     } else {
      PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.byte[0]=mem_readb(eaa);lflags.res.byte[0]=0-lflags.var1.byte[0];
       mem_writeb(eaa,lflags.res.byte[0]);
     }
     break;
    }
   case 0x04:
    { if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_AX].byte[0]**earb; FillFlagsNoCFOF(); if (cpu_regs.regs[REGI_AX].byte[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (cpu_regs.regs[REGI_AX].word[0] & 0xff00) { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };} else {PhysPt eaa=(core.ea_table)[rm]();;cpu_regs.regs[REGI_AX].word[0]=cpu_regs.regs[REGI_AX].byte[0]*mem_readb(eaa); FillFlagsNoCFOF(); if (cpu_regs.regs[REGI_AX].byte[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (cpu_regs.regs[REGI_AX].word[0] & 0xff00) { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };} };
    break;
   case 0x05:
    { if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;{ cpu_regs.regs[REGI_AX].word[0]=((Bit8s)cpu_regs.regs[REGI_AX].byte[0]) * ((Bit8s)(*earb)); FillFlagsNoCFOF(); if ((cpu_regs.regs[REGI_AX].word[0] & 0xff80)==0xff80 || (cpu_regs.regs[REGI_AX].word[0] & 0xff80)==0x0000) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ cpu_regs.regs[REGI_AX].word[0]=((Bit8s)cpu_regs.regs[REGI_AX].byte[0]) * ((Bit8s)(mem_readb(eaa))); FillFlagsNoCFOF(); if ((cpu_regs.regs[REGI_AX].word[0] & 0xff80)==0xff80 || (cpu_regs.regs[REGI_AX].word[0] & 0xff80)==0x0000) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
    break;
   case 0x06:
    { if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;{ Bitu val=*earb; if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bitu quo=cpu_regs.regs[REGI_AX].word[0] / val; Bit8u rem=(Bit8u)(cpu_regs.regs[REGI_AX].word[0] % val); Bit8u quo8=(Bit8u)(quo&0xff); if (quo>0xff) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_AX].byte[1]=rem; cpu_regs.regs[REGI_AX].byte[0]=quo8; };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bitu val=mem_readb(eaa); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bitu quo=cpu_regs.regs[REGI_AX].word[0] / val; Bit8u rem=(Bit8u)(cpu_regs.regs[REGI_AX].word[0] % val); Bit8u quo8=(Bit8u)(quo&0xff); if (quo>0xff) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_AX].byte[1]=rem; cpu_regs.regs[REGI_AX].byte[0]=quo8; };} };
    break;
   case 0x07:
    { if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;{ Bits val=(Bit8s)(*earb); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bits quo=((Bit16s)cpu_regs.regs[REGI_AX].word[0]) / val; Bit8s rem=(Bit8s)((Bit16s)cpu_regs.regs[REGI_AX].word[0] % val); Bit8s quo8s=(Bit8s)(quo&0xff); if (quo!=(Bit16s)quo8s) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_AX].byte[1]=rem; cpu_regs.regs[REGI_AX].byte[0]=quo8s; };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits val=(Bit8s)(mem_readb(eaa)); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bits quo=((Bit16s)cpu_regs.regs[REGI_AX].word[0]) / val; Bit8s rem=(Bit8s)((Bit16s)cpu_regs.regs[REGI_AX].word[0] % val); Bit8s quo8s=(Bit8s)(quo&0xff); if (quo!=(Bit16s)quo8s) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_AX].byte[1]=rem; cpu_regs.regs[REGI_AX].byte[0]=quo8s; };} };
    break;
   }
   return CASERET_BREAK;
  }
}

static int x86_GRP3_Ew_Iw(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
   case 0x01:
    {
     if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; lflags.type=t_TESTw;;}
     else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.var2.word[0]=Fetchw(); lflags.res.word[0]=lflags.var1.word[0] & lflags.var2.word[0]; lflags.type=t_TESTw;;}
     break;
    }
   case 0x02:
    {
     if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*earw=~*earw;}
     else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,~mem_readw(eaa));}
     break;
    }
   case 0x03:
    {
     lflags.type=t_NEGw;
     if (rm >= 0xc0 ) {
      Bit16u * earw=lookupRMEAregw[rm];;lflags.var1.word[0]=*earw;lflags.res.word[0]=0-lflags.var1.word[0];
      *earw=lflags.res.word[0];
     } else {
      PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.word[0]=mem_readw(eaa);lflags.res.word[0]=0-lflags.var1.word[0];
       mem_writew(eaa,lflags.res.word[0]);
     }
     break;
    }
   case 0x04:
    { if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bitu tempu=(Bitu)cpu_regs.regs[REGI_AX].word[0]*(Bitu)(*earw); cpu_regs.regs[REGI_AX].word[0]=(Bit16u)(tempu); cpu_regs.regs[REGI_DX].word[0]=(Bit16u)(tempu >> 16); FillFlagsNoCFOF(); if (cpu_regs.regs[REGI_AX].word[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (cpu_regs.regs[REGI_DX].word[0]) { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bitu tempu=(Bitu)cpu_regs.regs[REGI_AX].word[0]*(Bitu)(mem_readw(eaa)); cpu_regs.regs[REGI_AX].word[0]=(Bit16u)(tempu); cpu_regs.regs[REGI_DX].word[0]=(Bit16u)(tempu >> 16); FillFlagsNoCFOF(); if (cpu_regs.regs[REGI_AX].word[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (cpu_regs.regs[REGI_DX].word[0]) { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
    break;
   case 0x05:
    { if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bits temps=((Bit16s)cpu_regs.regs[REGI_AX].word[0])*((Bit16s)(*earw)); cpu_regs.regs[REGI_AX].word[0]=(Bit16s)(temps); cpu_regs.regs[REGI_DX].word[0]=(Bit16s)(temps >> 16); FillFlagsNoCFOF(); if (((temps & 0xffff8000)==0xffff8000 || (temps & 0xffff8000)==0x0000)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits temps=((Bit16s)cpu_regs.regs[REGI_AX].word[0])*((Bit16s)(mem_readw(eaa))); cpu_regs.regs[REGI_AX].word[0]=(Bit16s)(temps); cpu_regs.regs[REGI_DX].word[0]=(Bit16s)(temps >> 16); FillFlagsNoCFOF(); if (((temps & 0xffff8000)==0xffff8000 || (temps & 0xffff8000)==0x0000)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} }
    break;
   case 0x06:
    { if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bitu val=*earw; if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bitu num=((Bit32u)cpu_regs.regs[REGI_DX].word[0]<<16)|cpu_regs.regs[REGI_AX].word[0]; Bitu quo=num/val; Bit16u rem=(Bit16u)(num % val); Bit16u quo16=(Bit16u)(quo&0xffff); if (quo!=(Bit32u)quo16) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].word[0]=rem; cpu_regs.regs[REGI_AX].word[0]=quo16; };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bitu val=mem_readw(eaa); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bitu num=((Bit32u)cpu_regs.regs[REGI_DX].word[0]<<16)|cpu_regs.regs[REGI_AX].word[0]; Bitu quo=num/val; Bit16u rem=(Bit16u)(num % val); Bit16u quo16=(Bit16u)(quo&0xffff); if (quo!=(Bit32u)quo16) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].word[0]=rem; cpu_regs.regs[REGI_AX].word[0]=quo16; };} }
    break;
   case 0x07:
    { if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bits val=(Bit16s)(*earw); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bits num=(Bit32s)((cpu_regs.regs[REGI_DX].word[0]<<16)|cpu_regs.regs[REGI_AX].word[0]); Bits quo=num/val; Bit16s rem=(Bit16s)(num % val); Bit16s quo16s=(Bit16s)quo; if (quo!=(Bit32s)quo16s) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].word[0]=rem; cpu_regs.regs[REGI_AX].word[0]=quo16s; };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits val=(Bit16s)(mem_readw(eaa)); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bits num=(Bit32s)((cpu_regs.regs[REGI_DX].word[0]<<16)|cpu_regs.regs[REGI_AX].word[0]); Bits quo=num/val; Bit16s rem=(Bit16s)(num % val); Bit16s quo16s=(Bit16s)quo; if (quo!=(Bit32s)quo16s) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].word[0]=rem; cpu_regs.regs[REGI_AX].word[0]=quo16s; };} }
    break;
   }
   return CASERET_BREAK;
  }
}

static int x86_CLC(void) {
  FillFlags();
  if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
  return CASERET_BREAK;
}

static int x86_STC(void) {
  FillFlags();
  if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
  return CASERET_BREAK;
}

static int x86_CLI(void) {
  if (CPU_CLI()) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_STI(void) {
  if (CPU_STI()) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };

  if ((cpu_regs.flags & 0x00000200) && PIC_IRQCheck) return CASERET_END;

  return CASERET_BREAK;
}

static int x86_CLD(void) {
  if (false) cpu_regs.flags|=0x00000400; else cpu_regs.flags&=~0x00000400;
  cpu.direction=1;
  return CASERET_BREAK;
}

static int x86_STD(void) {
  if (true) cpu_regs.flags|=0x00000400; else cpu_regs.flags&=~0x00000400;
  cpu.direction=-1;
  return CASERET_BREAK;
}

static int x86_GRP4_Eb(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
    { if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]+1; *earb=lflags.res.byte[0]; lflags.type=t_INCb;;} else {PhysPt eaa=(core.ea_table)[rm]();;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]+1; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_INCb;;} };
    break;
   case 0x01:
    { if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.byte[0]=*earb; lflags.res.byte[0]=lflags.var1.byte[0]-1; *earb=lflags.res.byte[0]; lflags.type=t_DECb;;} else {PhysPt eaa=(core.ea_table)[rm]();;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.byte[0]=mem_readb(eaa); lflags.res.byte[0]=lflags.var1.byte[0]-1; mem_writeb(eaa,lflags.res.byte[0]); lflags.type=t_DECb;;} };
    break;
   case 0x07:
    {
     Bitu cb=Fetchw();
     FillFlags();cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
     return cb;
    }
   default:
    E_Exit("Illegal GRP4 Call %d",(rm>>3) & 7);
    break;
   }
   return CASERET_BREAK;
  }
}

static int x86_GRP5_Ew(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
    { if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]+1; *earw=lflags.res.word[0]; lflags.type=t_INCw;;} else {PhysPt eaa=(core.ea_table)[rm]();;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]+1; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_INCw;;} };
    break;
   case 0x01:
    { if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=*earw; lflags.res.word[0]=lflags.var1.word[0]-1; *earw=lflags.res.word[0]; lflags.type=t_DECw;;} else {PhysPt eaa=(core.ea_table)[rm]();;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.word[0]=mem_readw(eaa); lflags.res.word[0]=lflags.var1.word[0]-1; mem_writew(eaa,lflags.res.word[0]); lflags.type=t_DECw;;} };
    break;
   case 0x02:
    if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;cpu_regs.ip.dword[0]=*earw;}
    else {PhysPt eaa=(core.ea_table)[rm]();;cpu_regs.ip.dword[0]=mem_readw(eaa);}
    CPU_Push16((core.cseip-SegPhys(cs)));
    return CASERET_CONTINUE;
   case 0x03:
    {
     if (rm >= 0xc0) return CASERET_ILLEGAL;
     PhysPt eaa=(core.ea_table)[rm]();;
     Bit16u newip=mem_readw(eaa);
     Bit16u newcs=mem_readw(eaa+2);
     FillFlags();
     CPU_CALL(false,newcs,newip,(core.cseip-SegPhys(cs)));

     if ((cpu_regs.flags & 0x00000100)) {
      cpudecoder=CPU_Core_Normal_Trap_Run;
      return CBRET_NONE;
     }

     return CASERET_CONTINUE;
    }
    break;
   case 0x04:
    if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;cpu_regs.ip.dword[0]=*earw;}
    else {PhysPt eaa=(core.ea_table)[rm]();;cpu_regs.ip.dword[0]=mem_readw(eaa);}
    return CASERET_CONTINUE;
   case 0x05:
    {
     if (rm >= 0xc0) return CASERET_ILLEGAL;
     PhysPt eaa=(core.ea_table)[rm]();;
     Bit16u newip=mem_readw(eaa);
     Bit16u newcs=mem_readw(eaa+2);
     FillFlags();
     CPU_JMP(false,newcs,newip,(core.cseip-SegPhys(cs)));

     if ((cpu_regs.flags & 0x00000100)) {
      cpudecoder=CPU_Core_Normal_Trap_Run;
      return CBRET_NONE;
     }

     return CASERET_CONTINUE;
    }
    break;
   case 0x06:
    if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;CPU_Push16(*earw);}
    else {PhysPt eaa=(core.ea_table)[rm]();;CPU_Push16(mem_readw(eaa));}
    break;
   default:
    LOG(LOG_CPU,LOG_ERROR)("CPU:GRP5:Illegal Call %2X",which);
    return CASERET_ILLEGAL;
   }
   return CASERET_BREAK;
  }
}

static int x86_0F_WGRP_6_Exxx(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
   case 0x01:
    {
     Bitu saveval;
     if (!which) saveval=CPU_SLDT();
     else saveval=CPU_STR();
     if (rm >= 0xc0) {Bit16u * earw=lookupRMEAregw[rm];;*earw=saveval;}
     else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,saveval);}
    }
    break;
   case 0x02:case 0x03:case 0x04:case 0x05:
    {
     Bitu loadval;
     if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;loadval=*earw;}
     else {PhysPt eaa=(core.ea_table)[rm]();;loadval=mem_readw(eaa);}
     switch (which) {
     case 0x02:
      if (cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
      if (CPU_LLDT(loadval)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
      break;
     case 0x03:
      if (cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
      if (CPU_LTR(loadval)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
      break;
     case 0x04:
      CPU_VERR(loadval);
      break;
     case 0x05:
      CPU_VERW(loadval);
      break;
     }
    }
    break;
   default:
    return CASERET_ILLEGAL;
   }
  }
  return CASERET_BREAK;
}

static int x86_Group_7_Ew(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm < 0xc0) {
    PhysPt eaa=(core.ea_table)[rm]();;Bitu limit;
    switch (which) {
    case 0x00:
     mem_writew(eaa,CPU_SGDT_limit());
     mem_writed(eaa+2,CPU_SGDT_base());
     break;
    case 0x01:
     mem_writew(eaa,CPU_SIDT_limit());
     mem_writed(eaa+2,CPU_SIDT_base());
     break;
    case 0x02:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     CPU_LGDT(mem_readw(eaa),mem_readd(eaa+2) & 0xFFFFFF);
     break;
    case 0x03:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     CPU_LIDT(mem_readw(eaa),mem_readd(eaa+2) & 0xFFFFFF);
     break;
    case 0x04:
     mem_writew(eaa,CPU_SMSW());
     break;
    case 0x06:
     limit=mem_readw(eaa);
     if (CPU_LMSW(limit)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
     break;
    case 0x07:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     PAGING_ClearTLB();
     break;
    }
   } else {
    Bit16u * earw=lookupRMEAregw[rm];;
    switch (which) {
    case 0x02:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     return CASERET_ILLEGAL;
    case 0x03:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     return CASERET_ILLEGAL;
    case 0x04:
     *earw=CPU_SMSW();
     break;
    case 0x06:
     if (CPU_LMSW(*earw)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
     break;
    default:
     return CASERET_ILLEGAL;
    }
   }
  }
  return CASERET_BREAK;
}

static int x86_LAR_Gw_Ew(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;Bitu ar=*rmrw;
   if (rm >= 0xc0) {
    Bit16u * earw=lookupRMEAregw[rm];;CPU_LAR(*earw,ar);
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;CPU_LAR(mem_readw(eaa),ar);
   }
   *rmrw=(Bit16u)ar;
  }
  return CASERET_BREAK;
}

static int x86_LSL_Gw_Ew(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;Bitu limit=*rmrw;
   if (rm >= 0xc0) {
    Bit16u * earw=lookupRMEAregw[rm];;CPU_LSL(*earw,limit);
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;CPU_LSL(mem_readw(eaa),limit);
   }
   *rmrw=(Bit16u)limit;
  }
  return CASERET_BREAK;
}

static int x86_CLTS(void) {
  if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
  cpu.cr0&=(~0x00000008);
  return CASERET_BREAK;
}

static int x86_INVD(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_MOV_Rd_CRx(void) {
  {
   Bit8u rm=Fetchb();;
   Bitu which=(rm >> 3) & 7;
   if (rm < 0xc0 ) {
    rm |= 0xc0;
    LOG(LOG_CPU,LOG_ERROR)("MOV XXX,CR%u with non-register",which);
   }
   Bit32u * eard=lookupRMEAregd[rm];;
   Bit32u crx_value;
   if (CPU_READ_CRX(which,crx_value)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *eard=crx_value;
  }
  return CASERET_BREAK;
}

static int x86_MOV_Rd_DRx(void) {
  {
   Bit8u rm=Fetchb();;
   Bitu which=(rm >> 3) & 7;
   if (rm < 0xc0 ) {
    rm |= 0xc0;
    LOG(LOG_CPU,LOG_ERROR)("MOV XXX,DR%u with non-register",which);
   }
   Bit32u * eard=lookupRMEAregd[rm];;
   Bit32u drx_value;
   if (CPU_READ_DRX(which,drx_value)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *eard=drx_value;
  }
  return CASERET_BREAK;
}

static int x86_MOV_CRx_Rd(void) {
  {
   Bit8u rm=Fetchb();;
   Bitu which=(rm >> 3) & 7;
   if (rm < 0xc0 ) {
    rm |= 0xc0;
    LOG(LOG_CPU,LOG_ERROR)("MOV XXX,CR%u with non-register",which);
   }
   Bit32u * eard=lookupRMEAregd[rm];;
   if (CPU_WRITE_CRX(which,*eard)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_MOV_DRx_Rd(void) {
  {
   Bit8u rm=Fetchb();;
   Bitu which=(rm >> 3) & 7;
   if (rm < 0xc0 ) {
    rm |= 0xc0;
    LOG(LOG_CPU,LOG_ERROR)("MOV DR%u,XXX with non-register",which);
   }
   Bit32u * eard=lookupRMEAregd[rm];;
   if (CPU_WRITE_DRX(which,*eard)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_MOV_Rd_TRx(void) {
  {
   Bit8u rm=Fetchb();;
   Bitu which=(rm >> 3) & 7;
   if (rm < 0xc0 ) {
    rm |= 0xc0;
    LOG(LOG_CPU,LOG_ERROR)("MOV XXX,TR%u with non-register",which);
   }
   Bit32u * eard=lookupRMEAregd[rm];;
   Bit32u trx_value;
   if (CPU_READ_TRX(which,trx_value)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *eard=trx_value;
  }
  return CASERET_BREAK;
}

static int x86_MOV_TRx_Rd(void) {
  {
   Bit8u rm=Fetchb();;
   Bitu which=(rm >> 3) & 7;
   if (rm < 0xc0 ) {
    rm |= 0xc0;
    LOG(LOG_CPU,LOG_ERROR)("MOV TR%u,XXX with non-register",which);
   }
   Bit32u * eard=lookupRMEAregd[rm];;
   if (CPU_WRITE_TRX(which,*eard)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_RDTSC(void) {
  {
   if (CPU_ArchitectureType<0x50) return CASERET_ILLEGAL;

   Bit64s tsc=(Bit64s)(PIC_FullIndex()*(double) (CPU_CycleAutoAdjust?70000:CPU_CycleMax));
   cpu_regs.regs[REGI_DX].dword[0]=(Bit32u)(tsc>>32);
   cpu_regs.regs[REGI_AX].dword[0]=(Bit32u)(tsc&0xffffffff);
  }
  return CASERET_BREAK;
}

static int x86_0F_WJO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_OF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_OF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF() || get_ZF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF() && !get_ZF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_SF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_SF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_PF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_PF())) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) != (get_OF()!=0))) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) == (get_OF()!=0))) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF() || ((get_SF()!=0) != (get_OF()!=0)))) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_WJNLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF() && ((get_SF()!=0) == (get_OF()!=0)))) cpu_regs.ip.word[0]+=Fetchws(); cpu_regs.ip.word[0]+=2; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_SETO(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_OF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_OF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNO(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_OF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_OF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETB(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_CF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_CF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNB(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_CF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_CF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETZ(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_ZF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_ZF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNZ(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_ZF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_ZF())) ? 1 : 0);} }; return CASERET_BREAK;
}

static int x86_SETBE(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_CF() || get_ZF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_CF() || get_ZF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNBE(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_CF() && !get_ZF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_CF() && !get_ZF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETS(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_SF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_SF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNS(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_SF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_SF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETP(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_PF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_PF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNP(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_PF())) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_PF())) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETL(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=(((get_SF()!=0) != (get_OF()!=0))) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,(((get_SF()!=0) != (get_OF()!=0))) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNL(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=(((get_SF()!=0) == (get_OF()!=0))) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,(((get_SF()!=0) == (get_OF()!=0))) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETLE(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((get_ZF() || ((get_SF()!=0) != (get_OF()!=0)))) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((get_ZF() || ((get_SF()!=0) != (get_OF()!=0)))) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_SETNLE(void) {
  { Bit8u rm=Fetchb();; if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*earb=((!get_ZF() && ((get_SF()!=0) == (get_OF()!=0)))) ? 1 : 0;} else {PhysPt eaa=(core.ea_table)[rm]();;mem_writeb(eaa,((!get_ZF() && ((get_SF()!=0) == (get_OF()!=0)))) ? 1 : 0);} };return CASERET_BREAK;
}

static int x86_0F_WPUSH_FS(void) {
  CPU_Push16(SegValue(fs));return CASERET_BREAK;
}

static int x86_0F_WPOP_FS(void) {
  if (CPU_PopSeg(fs,false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_CPUID(void) {
  if (!CPU_CPUID()) return CASERET_ILLEGAL;
  return CASERET_BREAK;
}

static int x86_BT_Ew_Gw(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   Bit16u mask=1 << (*rmrw & 15);
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;
    if ((*earw & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit16s)*rmrw)>>4)*2;
    Bit16u old=mem_readw(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
   }
   return CASERET_BREAK;
  }
}

static int x86_SHLD_Ew_Gw_Ib(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(*earw<<16)|*rmrw; Bit32u tempd=lflags.var1.dword[0] << lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (lflags.var2.byte[0] - 16)); lflags.res.word[0]=(Bit16u)(tempd >> 16); *earw=lflags.res.word[0]; lflags.type=t_DSHLw;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(mem_readw(eaa)<<16)|*rmrw; Bit32u tempd=lflags.var1.dword[0] << lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (lflags.var2.byte[0] - 16)); lflags.res.word[0]=(Bit16u)(tempd >> 16); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_DSHLw;;} };
  return CASERET_BREAK;
}

static int x86_SHLD_Ew_Gw_CL(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(*earw<<16)|*rmrw; Bit32u tempd=lflags.var1.dword[0] << lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (lflags.var2.byte[0] - 16)); lflags.res.word[0]=(Bit16u)(tempd >> 16); *earw=lflags.res.word[0]; lflags.type=t_DSHLw;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(mem_readw(eaa)<<16)|*rmrw; Bit32u tempd=lflags.var1.dword[0] << lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (lflags.var2.byte[0] - 16)); lflags.res.word[0]=(Bit16u)(tempd >> 16); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_DSHLw;;} };
  return CASERET_BREAK;
}

static int x86_0F_WPUSH_GS(void) {
  CPU_Push16(SegValue(gs));return CASERET_BREAK;
}

static int x86_0F_WPOP_GS(void) {
  if (CPU_PopSeg(gs,false)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_BTS_Ew_Gw(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   Bit16u mask=1 << (*rmrw & 15);
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;
    if ((*earw & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    *earw|=mask;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit16s)*rmrw)>>4)*2;
    Bit16u old=mem_readw(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    mem_writew(eaa,old | mask);
   }
   return CASERET_BREAK;
  }
}

static int x86_SHRD_Ew_Gw_Ib(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(*rmrw<<16)|*earw; Bit32u tempd=lflags.var1.dword[0] >> lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (32-lflags.var2.byte[0] )); lflags.res.word[0]=(Bit16u)(tempd); *earw=lflags.res.word[0]; lflags.type=t_DSHRw;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(*rmrw<<16)|mem_readw(eaa); Bit32u tempd=lflags.var1.dword[0] >> lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (32-lflags.var2.byte[0] )); lflags.res.word[0]=(Bit16u)(tempd); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_DSHRw;;} };
  return CASERET_BREAK;
}

static int x86_SHRD_Ew_Gw_CL(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(*rmrw<<16)|*earw; Bit32u tempd=lflags.var1.dword[0] >> lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (32-lflags.var2.byte[0] )); lflags.res.word[0]=(Bit16u)(tempd); *earw=lflags.res.word[0]; lflags.type=t_DSHRw;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=(*rmrw<<16)|mem_readw(eaa); Bit32u tempd=lflags.var1.dword[0] >> lflags.var2.byte[0]; if (lflags.var2.byte[0]>16) tempd |= (*rmrw << (32-lflags.var2.byte[0] )); lflags.res.word[0]=(Bit16u)(tempd); mem_writew(eaa,lflags.res.word[0]); lflags.type=t_DSHRw;;} };
  return CASERET_BREAK;
}

static int x86_IMUL_Gw_Ew(void) {
  { Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;; if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;{ Bits res=((Bit16s)*earw) * ((Bit16s)*rmrw); *rmrw=res & 0xffff; FillFlagsNoCFOF(); if ((res>= -32768) && (res<=32767)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits res=((Bit16s)mem_readw(eaa)) * ((Bit16s)*rmrw); *rmrw=res & 0xffff; FillFlagsNoCFOF(); if ((res>= -32768) && (res<=32767)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
  return CASERET_BREAK;
}

static int x86_cmpxchg_Eb_Gb(void) {
  {
   if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
   FillFlags();
   Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;;
   if (rm >= 0xc0 ) {
    Bit8u * earb=lookupRMEAregb[rm];;
    if (cpu_regs.regs[REGI_AX].byte[0] == *earb) {
     *earb=*rmrb;
     if (1) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    } else {
     cpu_regs.regs[REGI_AX].byte[0] = *earb;
     if (0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    }
   } else {
       PhysPt eaa=(core.ea_table)[rm]();;
    Bit8u val = mem_readb(eaa);
    if (cpu_regs.regs[REGI_AX].byte[0] == val) {
     mem_writeb(eaa,*rmrb);
     if (1) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    } else {
     mem_writeb(eaa,val);
     cpu_regs.regs[REGI_AX].byte[0] = val;
     if (0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_cmpxchg_Ew_Gw(void) {
  {
   if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
   FillFlags();
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;
    if(cpu_regs.regs[REGI_AX].word[0] == *earw) {
     *earw = *rmrw;
     if (1) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    } else {
     cpu_regs.regs[REGI_AX].word[0] = *earw;
     if (0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    }
   } else {
       PhysPt eaa=(core.ea_table)[rm]();;
    Bit16u val = mem_readw(eaa);
    if(cpu_regs.regs[REGI_AX].word[0] == val) {
     mem_writew(eaa,*rmrw);
     if (1) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    } else {
     mem_writew(eaa,val);
     cpu_regs.regs[REGI_AX].word[0] = val;
     if (0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_LSS_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(ss,mem_readw(eaa+2))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrw=mem_readw(eaa);
   return CASERET_BREAK;
  }
}

static int x86_BTR_Ew_Gw(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   Bit16u mask=1 << (*rmrw & 15);
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;
    if ((*earw & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    *earw&= ~mask;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit16s)*rmrw)>>4)*2;
    Bit16u old=mem_readw(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    mem_writew(eaa,old & ~mask);
   }
   return CASERET_BREAK;
  }
}

static int x86_LFS_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(fs,mem_readw(eaa+2))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrw=mem_readw(eaa);
   return CASERET_BREAK;
  }
}

static int x86_LGS_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(gs,mem_readw(eaa+2))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrw=mem_readw(eaa);
   return CASERET_BREAK;
  }
}

static int x86_MOVZX_Gw_Eb(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrw=*earb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrw=mem_readb(eaa);}
   return CASERET_BREAK;
  }
}

static int x86_GRP8_Ew_Ib(void) {
  {
   FillFlags();Bit8u rm=Fetchb();;
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;
    Bit16u mask=1 << (Fetchb() & 15);
    if ((*earw & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    switch (rm & 0x38) {
    case 0x20:
     break;
    case 0x28:
     *earw|=mask;
     break;
    case 0x30:
     *earw&= ~mask;
     break;
    case 0x38:
     *earw^=mask;
     break;
    default:
     E_Exit("CPU:0F:BA:Illegal subfunction %X",rm & 0x38);
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit16u old=mem_readw(eaa);
    Bit16u mask=1 << (Fetchb() & 15);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    switch (rm & 0x38) {
    case 0x20:
     break;
    case 0x28:
     mem_writew(eaa,old|mask);
     break;
    case 0x30:
     mem_writew(eaa,old & ~mask);
     break;
    case 0x38:
     mem_writew(eaa,old ^ mask);
     break;
    default:
     E_Exit("CPU:0F:BA:Illegal subfunction %X",rm & 0x38);
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_BTC_Ew_Gw(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   Bit16u mask=1 << (*rmrw & 15);
   if (rm >= 0xc0 ) {
    Bit16u * earw=lookupRMEAregw[rm];;
    if ((*earw & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    *earw^=mask;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit16s)*rmrw)>>4)*2;
    Bit16u old=mem_readw(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    mem_writew(eaa,old ^ mask);
   }
   return CASERET_BREAK;
  }
}

static int x86_BSF_Gw_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   Bit16u result,value;
   if (rm >= 0xc0) { Bit16u * earw=lookupRMEAregw[rm];; value=*earw; }
   else { PhysPt eaa=(core.ea_table)[rm]();; value=mem_readw(eaa); }
   if (value==0) {
    if (true) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
   } else {
    result = 0;
    while ((value & 0x01)==0) { result++; value>>=1; }
    if (false) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    *rmrw = result;
   }
   lflags.type=t_UNKNOWN;
   return CASERET_BREAK;
  }
}

static int x86_BSR_Gw_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   Bit16u result,value;
   if (rm >= 0xc0) { Bit16u * earw=lookupRMEAregw[rm];; value=*earw; }
   else { PhysPt eaa=(core.ea_table)[rm]();; value=mem_readw(eaa); }
   if (value==0) {
    if (true) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
   } else {
    result = 15;
    while ((value & 0x8000)==0) { result--; value<<=1; }
    if (false) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    *rmrw = result;
   }
   lflags.type=t_UNKNOWN;
   return CASERET_BREAK;
  }
}

static int x86_MOVSX_Gw_Eb(void) {
  {
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrw=*(Bit8s *)earb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrw=(Bit8s)(mem_readb(eaa));}
   return CASERET_BREAK;
  }
}

static int x86_XADD_Gb_Eb(void) {
  {
   if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit8u * rmrb; rmrb=lookupRMregb[rm];;;Bit8u oldrmrb=*rmrb;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrb=*earb;*earb+=oldrmrb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrb=mem_readb(eaa);mem_writeb(eaa,mem_readb(eaa)+oldrmrb);}
   return CASERET_BREAK;
  }
}

static int x86_XADD_Gw_Ew(void) {
  {
   if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;Bit16u oldrmrw=*rmrw;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*rmrw=*earw;*earw+=oldrmrw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrw=mem_readw(eaa);mem_writew(eaa,mem_readw(eaa)+oldrmrw);}
   return CASERET_BREAK;
  }
}

static int x86_BSWAP_AX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_AX].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_CX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_CX].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_DX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_DX].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_BX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_BX].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_SP(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_SP].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_BP(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_BP].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_SI(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_SI].word[0] = 0;;return CASERET_BREAK;
}

static int x86_BSWAP_DI(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_DI].word[0] = 0;;return CASERET_BREAK;
}

static int x86_ADD_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ADDd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ADDd;;} };return CASERET_BREAK;
}

static int x86_ADD_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_ADDd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_ADDd;;} };return CASERET_BREAK;
}

static int x86_ADD_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_ADDd;;};return CASERET_BREAK;
}

static int x86_DPUSH_ES(void) {
  CPU_Push32(SegValue(es));return CASERET_BREAK;
}

static int x86_DPOP_ES(void) {
  if (CPU_PopSeg(es,true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_OR_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ORd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ORd;;} };return CASERET_BREAK;
}

static int x86_OR_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_ORd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_ORd;;} };return CASERET_BREAK;
}

static int x86_OR_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_ORd;;};return CASERET_BREAK;
}

static int x86_DPUSH_CS(void) {
  CPU_Push32(SegValue(cs));return CASERET_BREAK;
}

static int x86_ADC_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; *eard=lflags.res.dword[0]; lflags.type=t_ADCd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ADCd;;} };return CASERET_BREAK;
}

static int x86_ADC_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; *rmrd=lflags.res.dword[0]; lflags.type=t_ADCd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; *rmrd=lflags.res.dword[0]; lflags.type=t_ADCd;;} };return CASERET_BREAK;
}

static int x86_ADC_EAX_Id(void) {
  { lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_ADCd;;};return CASERET_BREAK;
}

static int x86_DPUSH_SS(void) {
  CPU_Push32(SegValue(ss));return CASERET_BREAK;
}

static int x86_DPOP_SS(void) {
  if (CPU_PopSeg(ss,true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  CPU_Cycles++;
  return CASERET_BREAK;
}

static int x86_SBB_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); *eard=lflags.res.dword[0]; lflags.type=t_SBBd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SBBd;;} };return CASERET_BREAK;
}

static int x86_SBB_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); *rmrd=lflags.res.dword[0]; lflags.type=t_SBBd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); *rmrd=lflags.res.dword[0]; lflags.type=t_SBBd;;} };return CASERET_BREAK;
}

static int x86_SBB_EAX_Id(void) {
  { lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_SBBd;;};return CASERET_BREAK;
}

static int x86_DPUSH_DS(void) {
  CPU_Push32(SegValue(ds));return CASERET_BREAK;
}

static int x86_DPOP_DS(void) {
  if (CPU_PopSeg(ds,true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_AND_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ANDd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ANDd;;} };return CASERET_BREAK;
}

static int x86_AND_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_ANDd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_ANDd;;} };return CASERET_BREAK;
}

static int x86_AND_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_ANDd;;};return CASERET_BREAK;
}

static int x86_SUB_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_SUBd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SUBd;;} };return CASERET_BREAK;
}

static int x86_SUB_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_SUBd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_SUBd;;} };return CASERET_BREAK;
}

static int x86_SUB_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_SUBd;;};return CASERET_BREAK;
}

static int x86_XOR_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_XORd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_XORd;;} };return CASERET_BREAK;
}

static int x86_XOR_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_XORd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; *rmrd=lflags.res.dword[0]; lflags.type=t_XORd;;} };return CASERET_BREAK;
}

static int x86_XOR_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_XORd;;};return CASERET_BREAK;
}

static int x86_CMP_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;} };return CASERET_BREAK;
}

static int x86_CMP_Gd_Ed(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=*rmrd;lflags.var2.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;} };return CASERET_BREAK;
}

static int x86_CMP_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;};return CASERET_BREAK;
}

static int x86_INC_EAX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_ECX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_CX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_CX].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_EDX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_DX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_DX].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_EBX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_BX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_BX].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_ESP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_SP].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_SP].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_EBP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_BP].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_BP].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_ESI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_SI].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_SI].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_INC_EDI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_DI].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]+1; cpu_regs.regs[REGI_DI].dword[0]=lflags.res.dword[0]; lflags.type=t_INCd;;return CASERET_BREAK;
}

static int x86_DEC_EAX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_AX].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_ECX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_CX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_CX].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_EDX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_DX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_DX].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_EBX(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_BX].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_BX].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_ESP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_SP].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_SP].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_EBP(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_BP].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_BP].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_ESI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_SI].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_SI].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_DEC_EDI(void) {
  if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=cpu_regs.regs[REGI_DI].dword[0]; lflags.res.dword[0]=lflags.var1.dword[0]-1; cpu_regs.regs[REGI_DI].dword[0]=lflags.res.dword[0]; lflags.type=t_DECd;;return CASERET_BREAK;
}

static int x86_PUSH_EAX(void) {
  CPU_Push32(cpu_regs.regs[REGI_AX].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_ECX(void) {
  CPU_Push32(cpu_regs.regs[REGI_CX].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_EDX(void) {
  CPU_Push32(cpu_regs.regs[REGI_DX].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_EBX(void) {
  CPU_Push32(cpu_regs.regs[REGI_BX].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_ESP(void) {
  CPU_Push32(cpu_regs.regs[REGI_SP].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_EBP(void) {
  CPU_Push32(cpu_regs.regs[REGI_BP].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_ESI(void) {
  CPU_Push32(cpu_regs.regs[REGI_SI].dword[0]);return CASERET_BREAK;
}

static int x86_PUSH_EDI(void) {
  CPU_Push32(cpu_regs.regs[REGI_DI].dword[0]);return CASERET_BREAK;
}

static int x86_POP_EAX(void) {
  cpu_regs.regs[REGI_AX].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_ECX(void) {
  cpu_regs.regs[REGI_CX].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_EDX(void) {
  cpu_regs.regs[REGI_DX].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_EBX(void) {
  cpu_regs.regs[REGI_BX].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_ESP(void) {
  cpu_regs.regs[REGI_SP].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_EBP(void) {
  cpu_regs.regs[REGI_BP].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_ESI(void) {
  cpu_regs.regs[REGI_SI].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_POP_EDI(void) {
  cpu_regs.regs[REGI_DI].dword[0]=CPU_Pop32();return CASERET_BREAK;
}

static int x86_PUSHAD(void) {
 {
  Bitu tmpesp = cpu_regs.regs[REGI_SP].dword[0];
  CPU_Push32(cpu_regs.regs[REGI_AX].dword[0]);CPU_Push32(cpu_regs.regs[REGI_CX].dword[0]);CPU_Push32(cpu_regs.regs[REGI_DX].dword[0]);CPU_Push32(cpu_regs.regs[REGI_BX].dword[0]);
  CPU_Push32(tmpesp);CPU_Push32(cpu_regs.regs[REGI_BP].dword[0]);CPU_Push32(cpu_regs.regs[REGI_SI].dword[0]);CPU_Push32(cpu_regs.regs[REGI_DI].dword[0]);
 }; return CASERET_BREAK;
}

static int x86_POPAD(void) {
  cpu_regs.regs[REGI_DI].dword[0]=CPU_Pop32();cpu_regs.regs[REGI_SI].dword[0]=CPU_Pop32();cpu_regs.regs[REGI_BP].dword[0]=CPU_Pop32();CPU_Pop32();
  cpu_regs.regs[REGI_BX].dword[0]=CPU_Pop32();cpu_regs.regs[REGI_DX].dword[0]=CPU_Pop32();cpu_regs.regs[REGI_CX].dword[0]=CPU_Pop32();cpu_regs.regs[REGI_AX].dword[0]=CPU_Pop32();
  return CASERET_BREAK;
}

static int x86_BOUND_Ed(void) {
  {
   Bit32s bound_min, bound_max;
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;PhysPt eaa=(core.ea_table)[rm]();;
   bound_min=mem_readd(eaa);
   bound_max=mem_readd(eaa+4);
   if ( (((Bit32s)*rmrd) < bound_min) || (((Bit32s)*rmrd) > bound_max) ) {
    { CPU_Exception(5); return CASERET_CONTINUE; };
   }
  }
  return CASERET_BREAK;
}

static int x86_ARPL_Ed_Rd(void) {
  {
   if (((cpu.pmode) && (cpu_regs.flags & 0x00020000)) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit16u * rmrw; rmrw=lookupRMregw[rm];;;
   if (rm >= 0xc0 ) {
    Bit32u * eard=lookupRMEAregd[rm];;Bitu new_sel=(Bit16u)*eard;
    CPU_ARPL(new_sel,*rmrw);
    *eard=(Bit32u)new_sel;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bitu new_sel=mem_readw(eaa);
    CPU_ARPL(new_sel,*rmrw);
    mem_writed(eaa,(Bit32u)new_sel);
   }
  }
  return CASERET_BREAK;
}

static int x86_PUSH_Id(void) {
  CPU_Push32(Fetchd());return CASERET_BREAK;
}

static int x86_IMUL_Gd_Ed_Id(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bit64s res=((Bit64s)((Bit32s)*eard))*((Bit64s)((Bit32s)Fetchds())); *rmrd=(Bit32s)res; FillFlagsNoCFOF(); if ((res>=-((Bit64s)(2147483647)+1)) && (res<=(Bit64s)2147483647)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bit64s res=((Bit64s)((Bit32s)mem_readd(eaa)))*((Bit64s)((Bit32s)Fetchds())); *rmrd=(Bit32s)res; FillFlagsNoCFOF(); if ((res>=-((Bit64s)(2147483647)+1)) && (res<=(Bit64s)2147483647)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
  return CASERET_BREAK;
}

static int x86_DPUSH_Ib(void) {
  CPU_Push32(Fetchbs());return CASERET_BREAK;
}

static int x86_IMUL_Gd_Ed_Ib(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bit64s res=((Bit64s)((Bit32s)*eard))*((Bit64s)((Bit32s)Fetchbs())); *rmrd=(Bit32s)res; FillFlagsNoCFOF(); if ((res>=-((Bit64s)(2147483647)+1)) && (res<=(Bit64s)2147483647)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bit64s res=((Bit64s)((Bit32s)mem_readd(eaa)))*((Bit64s)((Bit32s)Fetchbs())); *rmrd=(Bit32s)res; FillFlagsNoCFOF(); if ((res>=-((Bit64s)(2147483647)+1)) && (res<=(Bit64s)2147483647)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
  return CASERET_BREAK;
}

static int x86_INSD(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],4)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  DoString(R_INSD);return CASERET_BREAK;
}

static int x86_OUTSD(void) {
  if (CPU_IO_Exception(cpu_regs.regs[REGI_DX].word[0],4)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  DoString(R_OUTSD);return CASERET_BREAK;
}

static int x86_DJO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_OF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_OF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJZ(void) {
    { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF() || get_ZF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF() && !get_ZF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_SF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_SF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_PF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_PF())) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) != (get_OF()!=0))) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) == (get_OF()!=0))) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF() || ((get_SF()!=0) != (get_OF()!=0)))) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_DJNLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF() && ((get_SF()!=0) == (get_OF()!=0)))) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_Grpl_Ed_Id(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm >= 0xc0) {
    Bit32u * eard=lookupRMEAregd[rm];;Bit32u id=Fetchd();
    switch (which) {
    case 0x00:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ADDd;;break;
    case 0x01: lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ORd;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; *eard=lflags.res.dword[0]; lflags.type=t_ADCd;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); *eard=lflags.res.dword[0]; lflags.type=t_SBBd;;break;
    case 0x04:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ANDd;;break;
    case 0x05:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_SUBd;;break;
    case 0x06:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_XORd;;break;
    case 0x07:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;break;
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit32u id=Fetchd();
    switch (which) {
    case 0x00:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ADDd;;break;
    case 0x01: lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ORd;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ADCd;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SBBd;;break;
    case 0x04:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ANDd;;break;
    case 0x05:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SUBd;;break;
    case 0x06:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_XORd;;break;
    case 0x07:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;break;
    }
   }
  }
  return CASERET_BREAK;
}

static int x86_Grpl_Ed_Ix(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm >= 0xc0) {
    Bit32u * eard=lookupRMEAregd[rm];;Bit32u id=(Bit32s)Fetchbs();
    switch (which) {
    case 0x00:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ADDd;;break;
    case 0x01: lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ORd;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; *eard=lflags.res.dword[0]; lflags.type=t_ADCd;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); *eard=lflags.res.dword[0]; lflags.type=t_SBBd;;break;
    case 0x04:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_ANDd;;break;
    case 0x05:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_SUBd;;break;
    case 0x06:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; *eard=lflags.res.dword[0]; lflags.type=t_XORd;;break;
    case 0x07:lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;break;
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit32u id=(Bit32s)Fetchbs();
    switch (which) {
    case 0x00:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ADDd;;break;
    case 0x01: lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] | lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ORd;;break;
    case 0x02:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]+lflags.var2.dword[0]+lflags.oldcf; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ADCd;;break;
    case 0x03:lflags.oldcf=get_CF()!=0; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-(lflags.var2.dword[0]+lflags.oldcf); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SBBd;;break;
    case 0x04:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_ANDd;;break;
    case 0x05:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SUBd;;break;
    case 0x06:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0] ^ lflags.var2.dword[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_XORd;;break;
    case 0x07:lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=id; lflags.res.dword[0]=lflags.var1.dword[0]-lflags.var2.dword[0]; lflags.type=t_CMPd;;break;
    }
   }
  }
  return CASERET_BREAK;
}

static int x86_TEST_Ed_Gd(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; lflags.type=t_TESTd;;} else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=*rmrd; lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; lflags.type=t_TESTd;;} };return CASERET_BREAK;
}

static int x86_XCHG_Ed_Gd(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;Bit32u oldrmrd=*rmrd;
   if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*rmrd=*eard;*eard=oldrmrd;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=mem_readd(eaa);mem_writed(eaa,oldrmrd);}
   return CASERET_BREAK;
  }
}

static int x86_MOV_Ed_Gd(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*eard=*rmrd;}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writed(eaa,*rmrd);}
   return CASERET_BREAK;
  }
}

static int x86_MOV_Gd_Ed(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*rmrd=*eard;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=mem_readd(eaa);}
   return CASERET_BREAK;
  }
}

static int x86_DMov_Ew_Sw(void) {
   {
    Bit8u rm=Fetchb();;Bit16u val;Bitu which=(rm>>3)&7;
    switch (which) {
    case 0x00:
     val=SegValue(es);break;
    case 0x01:
     val=SegValue(cs);break;
    case 0x02:
     val=SegValue(ss);break;
    case 0x03:
     val=SegValue(ds);break;
    case 0x04:
     val=SegValue(fs);break;
    case 0x05:
     val=SegValue(gs);break;
    default:
     LOG(LOG_CPU,LOG_ERROR)("CPU:8c:Illegal RM Byte");
     return CASERET_ILLEGAL;
    }
    if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*eard=val;}
    else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,val);}
    return CASERET_BREAK;
   }
}

static int x86_LEA_Gd(void) {
  {

   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   core.base_ds=core.base_ss=0;
   if ((core.prefixes & 0x1)) {
    *rmrd=(Bit32u)(*EATable[256+rm])();
   } else {
    *rmrd=(Bit32u)(*EATable[rm])();
   }
   return CASERET_BREAK;
  }
}

static int x86_POP_Ed(void) {
  {
   Bit32u val=CPU_Pop32();
   Bit8u rm=Fetchb();;
   if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*eard=val;}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writed(eaa,val);}
   return CASERET_BREAK;
  }
}

static int x86_XCHG_ECX_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_CX].dword[0];cpu_regs.regs[REGI_CX].dword[0]=temp;return CASERET_BREAK;}
}

static int x86_XCHG_EDX_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_DX].dword[0];cpu_regs.regs[REGI_DX].dword[0]=temp;return CASERET_BREAK;}
  return CASERET_BREAK;
}

static int x86_XCHG_EBX_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_BX].dword[0];cpu_regs.regs[REGI_BX].dword[0]=temp;return CASERET_BREAK;}
  return CASERET_BREAK;
}

static int x86_XCHG_ESP_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_SP].dword[0];cpu_regs.regs[REGI_SP].dword[0]=temp;return CASERET_BREAK;}
  return CASERET_BREAK;
}

static int x86_XCHG_EBP_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_BP].dword[0];cpu_regs.regs[REGI_BP].dword[0]=temp;return CASERET_BREAK;}
  return CASERET_BREAK;
}

static int x86_XCHG_ESI_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_SI].dword[0];cpu_regs.regs[REGI_SI].dword[0]=temp;return CASERET_BREAK;}
  return CASERET_BREAK;
}

static int x86_XCHG_EDI_EAX(void) {
  { Bit32u temp=cpu_regs.regs[REGI_AX].dword[0];cpu_regs.regs[REGI_AX].dword[0]=cpu_regs.regs[REGI_DI].dword[0];cpu_regs.regs[REGI_DI].dword[0]=temp;return CASERET_BREAK;}
  return CASERET_BREAK;
}

static int x86_CWDE(void) {
  cpu_regs.regs[REGI_AX].dword[0]=(Bit16s)cpu_regs.regs[REGI_AX].word[0];return CASERET_BREAK;
}

static int x86_CDQ(void) {
  if (cpu_regs.regs[REGI_AX].dword[0] & 0x80000000) cpu_regs.regs[REGI_DX].dword[0]=0xffffffff;
  else cpu_regs.regs[REGI_DX].dword[0]=0;
  return CASERET_BREAK;
}

static int x86_CALL_FAR_Ad(void) {
  {
   Bit32u newip=Fetchd();Bit16u newcs=Fetchw();
   FillFlags();
   CPU_CALL(true,newcs,newip,(core.cseip-SegPhys(cs)));

   if ((cpu_regs.flags & 0x00000100)) {
    cpudecoder=CPU_Core_Normal_Trap_Run;
    return CBRET_NONE;
   }

   return CASERET_CONTINUE;
  }
}

static int x86_PUSHFD(void) {
  if (CPU_PUSHF(true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_POPFD(void) {
  if (CPU_POPF(true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };

  if ((cpu_regs.flags & 0x00000100)) {
   cpudecoder=CPU_Core_Normal_Trap_Run;
   return CASERET_END;
  }


  if ((cpu_regs.flags & 0x00000200) && PIC_IRQCheck) return CASERET_END;

  return CASERET_BREAK;
}

static int x86_MOV_EAX_Od(void) {
  {
   PhysPt eaa; if ((core.prefixes & 0x1)) { eaa=core.base_ds+Fetchd(); } else { eaa=core.base_ds+Fetchw(); };
   cpu_regs.regs[REGI_AX].dword[0]=mem_readd(eaa);
  }
  return CASERET_BREAK;
}

static int x86_MOV_Od_EAX(void) {
  {
   PhysPt eaa; if ((core.prefixes & 0x1)) { eaa=core.base_ds+Fetchd(); } else { eaa=core.base_ds+Fetchw(); };
   mem_writed(eaa,cpu_regs.regs[REGI_AX].dword[0]);
  }
  return CASERET_BREAK;
}

static int x86_MOVSD(void) {
  DoString(R_MOVSD);return CASERET_BREAK;
}

static int x86_CMPSD(void) {
  DoString(R_CMPSD);return CASERET_BREAK;
}

static int x86_TEST_EAX_Id(void) {
  { lflags.var1.dword[0]=cpu_regs.regs[REGI_AX].dword[0];lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; lflags.type=t_TESTd;;};return CASERET_BREAK;
}

static int x86_STOSD(void) {
  DoString(R_STOSD);return CASERET_BREAK;
}

static int x86_LODSD(void) {
  DoString(R_LODSD);return CASERET_BREAK;
}

static int x86_SCASD(void) {
  DoString(R_SCASD);return CASERET_BREAK;
}

static int x86_MOV_EAX_Id(void) {
  cpu_regs.regs[REGI_AX].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_ECX_Id(void) {
  cpu_regs.regs[REGI_CX].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_EDX_Iw(void) {
  cpu_regs.regs[REGI_DX].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_EBX_Id(void) {
  cpu_regs.regs[REGI_BX].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_ESP_Id(void) {
  cpu_regs.regs[REGI_SP].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_EBP_Id(void) {
  cpu_regs.regs[REGI_BP].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_ESI_Id(void) {
  cpu_regs.regs[REGI_SI].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_MOV_EDI_Id(void) {
  cpu_regs.regs[REGI_DI].dword[0]=Fetchd();return CASERET_BREAK;
}

static int x86_GRP2_Ed_Ib(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit32u * eard=lookupRMEAregd[rm];; Bit8u val=Fetchb() & 0x1f; switch (which) { case 0x00:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (lflags.var1.dword[0] >> (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; if (lflags.res.dword[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (lflags.var1.dword[0] << (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; if (lflags.res.dword[0] & 0x80000000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!val) break; { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=(lflags.var1.dword[0] << 1) | cf; } else { lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.dword[0] >> (33-lflags.var2.byte[0])); } *eard=lflags.res.dword[0]; if (((lflags.var1.dword[0] >> (32-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val) { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=lflags.var1.dword[0] >> 1 | cf << 31; } else { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (cf << (32-lflags.var2.byte[0])) | (lflags.var1.dword[0] << (33-lflags.var2.byte[0])); } *eard=lflags.res.dword[0]; if ((lflags.var1.dword[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.dword[0]=*eard;lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] << lflags.var2.byte[0]; *eard=lflags.res.dword[0]; lflags.type=t_SHLd;;break; case 0x05:if (!val) break; lflags.var1.dword[0]=*eard;lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; *eard=lflags.res.dword[0]; lflags.type=t_SHRd;;break; case 0x07:if (!val) break; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; if (lflags.var1.dword[0] & 0x80000000) { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0])| (0xffffffff << (32 - lflags.var2.byte[0])); } else { lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; } *eard=lflags.res.dword[0]; lflags.type=t_SARd;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=Fetchb() & 0x1f; switch (which) { case 0x00:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (lflags.var1.dword[0] >> (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); if (lflags.res.dword[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (lflags.var1.dword[0] << (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); if (lflags.res.dword[0] & 0x80000000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!val) break; { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=(lflags.var1.dword[0] << 1) | cf; } else { lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.dword[0] >> (33-lflags.var2.byte[0])); } mem_writed(eaa,lflags.res.dword[0]); if (((lflags.var1.dword[0] >> (32-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val) { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=lflags.var1.dword[0] >> 1 | cf << 31; } else { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (cf << (32-lflags.var2.byte[0])) | (lflags.var1.dword[0] << (33-lflags.var2.byte[0])); } mem_writed(eaa,lflags.res.dword[0]); if ((lflags.var1.dword[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] << lflags.var2.byte[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SHLd;;break; case 0x05:if (!val) break; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SHRd;;break; case 0x07:if (!val) break; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); if (lflags.var1.dword[0] & 0x80000000) { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0])| (0xffffffff << (32 - lflags.var2.byte[0])); } else { lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; } mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SARd;;break; } } };return CASERET_BREAK;
}

static int x86_DRETN_Iw(void) {
  cpu_regs.ip.dword[0]=CPU_Pop32();
  cpu_regs.regs[REGI_SP].dword[0]+=Fetchw();
  return CASERET_CONTINUE;
}

static int x86_DRETN(void) {
  cpu_regs.ip.dword[0]=CPU_Pop32();
  return CASERET_CONTINUE;
}

static int x86_DLES(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(es,mem_readw(eaa+4))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrd=mem_readd(eaa);
   return CASERET_BREAK;
  }
}

static int x86_DLDS(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(ds,mem_readw(eaa+4))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrd=mem_readd(eaa);
   return CASERET_BREAK;
  }
}

static int x86_MOV_Ed_Id(void) {
  {
   Bit8u rm=Fetchb();;
   if (rm >= 0xc0) {Bit32u * eard=lookupRMEAregd[rm];;*eard=Fetchd();}
   else {PhysPt eaa=(core.ea_table)[rm]();;mem_writed(eaa,Fetchd());}
   return CASERET_BREAK;
  }
}

static int x86_DENTER_Iw_Ib(void) {
  {
   Bitu bytes=Fetchw();
   Bitu level=Fetchb();
   CPU_ENTER(true,bytes,level);
  }
  return CASERET_BREAK;
}

static int x86_DLEAVE(void) {
  cpu_regs.regs[REGI_SP].dword[0]&=cpu.stack.notmask;
  cpu_regs.regs[REGI_SP].dword[0]|=(cpu_regs.regs[REGI_BP].dword[0]&cpu.stack.mask);
  cpu_regs.regs[REGI_BP].dword[0]=CPU_Pop32();
  return CASERET_BREAK;
}

static int x86_DRETF_Iw(void) {
  {
   Bitu words=Fetchw();
   FillFlags();
   CPU_RET(true,words,(core.cseip-SegPhys(cs)));
   return CASERET_CONTINUE;
  }
}

static int x86_DRETF(void) {
  {
   FillFlags();
            CPU_RET(true,0,(core.cseip-SegPhys(cs)));
   return CASERET_CONTINUE;
  }
}

static int x86_DIRET(void) {
  {
   CPU_IRET(true,(core.cseip-SegPhys(cs)));

   if ((cpu_regs.flags & 0x00000100)) {
    cpudecoder=CPU_Core_Normal_Trap_Run;
    return CBRET_NONE;
   }


   if ((cpu_regs.flags & 0x00000200) && PIC_IRQCheck) return CBRET_NONE;

   return CASERET_CONTINUE;
  }
}

static int x86_GRP2_Ed_1(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit32u * eard=lookupRMEAregd[rm];; Bit8u val=1 & 0x1f; switch (which) { case 0x00:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (lflags.var1.dword[0] >> (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; if (lflags.res.dword[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (lflags.var1.dword[0] << (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; if (lflags.res.dword[0] & 0x80000000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!val) break; { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=(lflags.var1.dword[0] << 1) | cf; } else { lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.dword[0] >> (33-lflags.var2.byte[0])); } *eard=lflags.res.dword[0]; if (((lflags.var1.dword[0] >> (32-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val) { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=lflags.var1.dword[0] >> 1 | cf << 31; } else { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (cf << (32-lflags.var2.byte[0])) | (lflags.var1.dword[0] << (33-lflags.var2.byte[0])); } *eard=lflags.res.dword[0]; if ((lflags.var1.dword[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.dword[0]=*eard;lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] << lflags.var2.byte[0]; *eard=lflags.res.dword[0]; lflags.type=t_SHLd;;break; case 0x05:if (!val) break; lflags.var1.dword[0]=*eard;lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; *eard=lflags.res.dword[0]; lflags.type=t_SHRd;;break; case 0x07:if (!val) break; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; if (lflags.var1.dword[0] & 0x80000000) { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0])| (0xffffffff << (32 - lflags.var2.byte[0])); } else { lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; } *eard=lflags.res.dword[0]; lflags.type=t_SARd;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=1 & 0x1f; switch (which) { case 0x00:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (lflags.var1.dword[0] >> (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); if (lflags.res.dword[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (lflags.var1.dword[0] << (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); if (lflags.res.dword[0] & 0x80000000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!val) break; { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=(lflags.var1.dword[0] << 1) | cf; } else { lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.dword[0] >> (33-lflags.var2.byte[0])); } mem_writed(eaa,lflags.res.dword[0]); if (((lflags.var1.dword[0] >> (32-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val) { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=lflags.var1.dword[0] >> 1 | cf << 31; } else { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (cf << (32-lflags.var2.byte[0])) | (lflags.var1.dword[0] << (33-lflags.var2.byte[0])); } mem_writed(eaa,lflags.res.dword[0]); if ((lflags.var1.dword[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] << lflags.var2.byte[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SHLd;;break; case 0x05:if (!val) break; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SHRd;;break; case 0x07:if (!val) break; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); if (lflags.var1.dword[0] & 0x80000000) { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0])| (0xffffffff << (32 - lflags.var2.byte[0])); } else { lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; } mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SARd;;break; } } };return CASERET_BREAK;
}

static int x86_GRP2_Ed_CL(void) {
  { Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7; if (rm >= 0xc0) { Bit32u * eard=lookupRMEAregd[rm];; Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1f; switch (which) { case 0x00:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (lflags.var1.dword[0] >> (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; if (lflags.res.dword[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (lflags.var1.dword[0] << (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; if (lflags.res.dword[0] & 0x80000000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!val) break; { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=(lflags.var1.dword[0] << 1) | cf; } else { lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.dword[0] >> (33-lflags.var2.byte[0])); } *eard=lflags.res.dword[0]; if (((lflags.var1.dword[0] >> (32-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val) { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=*eard; lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=lflags.var1.dword[0] >> 1 | cf << 31; } else { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (cf << (32-lflags.var2.byte[0])) | (lflags.var1.dword[0] << (33-lflags.var2.byte[0])); } *eard=lflags.res.dword[0]; if ((lflags.var1.dword[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.dword[0]=*eard;lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] << lflags.var2.byte[0]; *eard=lflags.res.dword[0]; lflags.type=t_SHLd;;break; case 0x05:if (!val) break; lflags.var1.dword[0]=*eard;lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; *eard=lflags.res.dword[0]; lflags.type=t_SHRd;;break; case 0x07:if (!val) break; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; if (lflags.var1.dword[0] & 0x80000000) { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0])| (0xffffffff << (32 - lflags.var2.byte[0])); } else { lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; } *eard=lflags.res.dword[0]; lflags.type=t_SARd;;break; } } else { PhysPt eaa=(core.ea_table)[rm]();; Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1f; switch (which) { case 0x00:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (lflags.var1.dword[0] >> (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); if (lflags.res.dword[0] & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x01:if (!val) break; FillFlagsNoCFOF(); lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (lflags.var1.dword[0] << (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); if (lflags.res.dword[0] & 0x80000000) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800;;break; case 0x02:if (!val) break; { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=(lflags.var1.dword[0] << 1) | cf; } else { lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (cf << (lflags.var2.byte[0]-1)) | (lflags.var1.dword[0] >> (33-lflags.var2.byte[0])); } mem_writed(eaa,lflags.res.dword[0]); if (((lflags.var1.dword[0] >> (32-lflags.var2.byte[0])) & 1)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((cpu_regs.flags & 1) ^ (lflags.res.dword[0] >> 31)) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x03:if (val) { Bit32u cf=(Bit32u)FillFlags()&0x1; lflags.var1.dword[0]=mem_readd(eaa); lflags.var2.byte[0]=val; if (lflags.var2.byte[0]==1) { lflags.res.dword[0]=lflags.var1.dword[0] >> 1 | cf << 31; } else { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (cf << (32-lflags.var2.byte[0])) | (lflags.var1.dword[0] << (33-lflags.var2.byte[0])); } mem_writed(eaa,lflags.res.dword[0]); if ((lflags.var1.dword[0] >> (lflags.var2.byte[0] - 1)) & 1) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001; if ((lflags.res.dword[0] ^ (lflags.res.dword[0]<<1)) & 0x80000000) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; };break; case 0x04: case 0x06:if (!val) break; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] << lflags.var2.byte[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SHLd;;break; case 0x05:if (!val) break; lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.byte[0]=val; lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SHRd;;break; case 0x07:if (!val) break; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); if (lflags.var1.dword[0] & 0x80000000) { lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0])| (0xffffffff << (32 - lflags.var2.byte[0])); } else { lflags.res.dword[0]=lflags.var1.dword[0] >> lflags.var2.byte[0]; } mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_SARd;;break; } } };return CASERET_BREAK;
}

static int x86_DLOOPNZ(void) {
  if ((core.prefixes & 0x1)) {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].dword[0] && !get_ZF()) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  } else {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].word[0] && !get_ZF()) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_DLOOPZ(void) {
  if ((core.prefixes & 0x1)) {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].dword[0] && get_ZF()) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  } else {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].word[0] && get_ZF()) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_DLOOP(void) {
  if ((core.prefixes & 0x1)) {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].dword[0]) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  } else {
   { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (--cpu_regs.regs[REGI_CX].word[0]) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  }
  return CASERET_BREAK;
}

static int x86_DJCXZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (!(cpu_regs.regs[REGI_CX].dword[0] & AddrMaskTable[core.prefixes& 0x1])) cpu_regs.ip.dword[0]+=Fetchbs(); cpu_regs.ip.dword[0]+=1; return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_IN_EAX_Ib(void) {
  {
   Bitu port=Fetchb();
   if (CPU_IO_Exception(port,4)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   cpu_regs.regs[REGI_AX].dword[0]=IO_ReadD(port);
   return CASERET_BREAK;
  }
}

static int x86_OUT_Ib_EAX(void) {
  {
   Bitu port=Fetchb();
   if (CPU_IO_Exception(port,4)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   IO_WriteD(port,cpu_regs.regs[REGI_AX].dword[0]);
   return CASERET_BREAK;
  }
}

static int x86_CALL_Jd(void) {
  {
   Bit32s addip=Fetchds();
   cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
   CPU_Push32(cpu_regs.ip.dword[0]);
   cpu_regs.ip.dword[0]+=addip;
   return CASERET_CONTINUE;
  }
}

static int x86_JMP_Jd(void) {
  {
   Bit32s addip=Fetchds();
   cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
   cpu_regs.ip.dword[0]+=addip;
   return CASERET_CONTINUE;
  }
}

static int x86_JMP_Ad(void) {
  {
   Bit32u newip=Fetchd();
   Bit16u newcs=Fetchw();
   FillFlags();
   CPU_JMP(true,newcs,newip,(core.cseip-SegPhys(cs)));

   if ((cpu_regs.flags & 0x00000100)) {
    cpudecoder=CPU_Core_Normal_Trap_Run;
    return CBRET_NONE;
   }

   return CASERET_CONTINUE;
  }
}

static int x86_DJMP_Jb(void) {
  {
   Bit32s addip=Fetchbs();
   cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));;
   cpu_regs.ip.dword[0]+=addip;
   return CASERET_CONTINUE;
  }
}

static int x86_IN_EAX_DX(void) {
  cpu_regs.regs[REGI_AX].dword[0]=IO_ReadD(cpu_regs.regs[REGI_DX].word[0]);
  return CASERET_BREAK;
}

static int x86_OUT_DX_EAX(void) {
  IO_WriteD(cpu_regs.regs[REGI_DX].word[0],cpu_regs.regs[REGI_AX].dword[0]);
  return CASERET_BREAK;
}

static int x86_GRP3_Ed_Id(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
   case 0x01:
    {
     if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; lflags.type=t_TESTd;;}
     else {PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.var2.dword[0]=Fetchd(); lflags.res.dword[0]=lflags.var1.dword[0] & lflags.var2.dword[0]; lflags.type=t_TESTd;;}
     break;
    }
   case 0x02:
    {
     if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*eard=~*eard;}
     else {PhysPt eaa=(core.ea_table)[rm]();;mem_writed(eaa,~mem_readd(eaa));}
     break;
    }
   case 0x03:
    {
     lflags.type=t_NEGd;
     if (rm >= 0xc0 ) {
       Bit32u * eard=lookupRMEAregd[rm];;lflags.var1.dword[0]=*eard;lflags.res.dword[0]=0-lflags.var1.dword[0];
      *eard=lflags.res.dword[0];
     } else {
      PhysPt eaa=(core.ea_table)[rm]();;lflags.var1.dword[0]=mem_readd(eaa);lflags.res.dword[0]=0-lflags.var1.dword[0];
       mem_writed(eaa,lflags.res.dword[0]);
     }
     break;
    }
   case 0x04:
    { if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bit64u tempu=(Bit64u)cpu_regs.regs[REGI_AX].dword[0]*(Bit64u)(*eard); cpu_regs.regs[REGI_AX].dword[0]=(Bit32u)(tempu); cpu_regs.regs[REGI_DX].dword[0]=(Bit32u)(tempu >> 32); FillFlagsNoCFOF(); if (cpu_regs.regs[REGI_AX].dword[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (cpu_regs.regs[REGI_DX].dword[0]) { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bit64u tempu=(Bit64u)cpu_regs.regs[REGI_AX].dword[0]*(Bit64u)(mem_readd(eaa)); cpu_regs.regs[REGI_AX].dword[0]=(Bit32u)(tempu); cpu_regs.regs[REGI_DX].dword[0]=(Bit32u)(tempu >> 32); FillFlagsNoCFOF(); if (cpu_regs.regs[REGI_AX].dword[0] == 0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040; if (cpu_regs.regs[REGI_DX].dword[0]) { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
    break;
   case 0x05:
    { if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bit64s temps=((Bit64s)((Bit32s)cpu_regs.regs[REGI_AX].dword[0]))* ((Bit64s)((Bit32s)(*eard))); cpu_regs.regs[REGI_AX].dword[0]=(Bit32u)(temps); cpu_regs.regs[REGI_DX].dword[0]=(Bit32u)(temps >> 32); FillFlagsNoCFOF(); if ((cpu_regs.regs[REGI_DX].dword[0]==0xffffffff) && (cpu_regs.regs[REGI_AX].dword[0] & 0x80000000) ) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else if ( (cpu_regs.regs[REGI_DX].dword[0]==0x00000000) && (cpu_regs.regs[REGI_AX].dword[0]< 0x80000000) ) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bit64s temps=((Bit64s)((Bit32s)cpu_regs.regs[REGI_AX].dword[0]))* ((Bit64s)((Bit32s)(mem_readd(eaa)))); cpu_regs.regs[REGI_AX].dword[0]=(Bit32u)(temps); cpu_regs.regs[REGI_DX].dword[0]=(Bit32u)(temps >> 32); FillFlagsNoCFOF(); if ((cpu_regs.regs[REGI_DX].dword[0]==0xffffffff) && (cpu_regs.regs[REGI_AX].dword[0] & 0x80000000) ) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else if ( (cpu_regs.regs[REGI_DX].dword[0]==0x00000000) && (cpu_regs.regs[REGI_AX].dword[0]< 0x80000000) ) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
    break;
   case 0x06:
    { if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bitu val=*eard; if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bit64u num=(((Bit64u)cpu_regs.regs[REGI_DX].dword[0])<<32)|cpu_regs.regs[REGI_AX].dword[0]; Bit64u quo=num/val; Bit32u rem=(Bit32u)(num % val); Bit32u quo32=(Bit32u)(quo&0xffffffff); if (quo!=(Bit64u)quo32) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].dword[0]=rem; cpu_regs.regs[REGI_AX].dword[0]=quo32; };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bitu val=mem_readd(eaa); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bit64u num=(((Bit64u)cpu_regs.regs[REGI_DX].dword[0])<<32)|cpu_regs.regs[REGI_AX].dword[0]; Bit64u quo=num/val; Bit32u rem=(Bit32u)(num % val); Bit32u quo32=(Bit32u)(quo&0xffffffff); if (quo!=(Bit64u)quo32) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].dword[0]=rem; cpu_regs.regs[REGI_AX].dword[0]=quo32; };} };
    break;
   case 0x07:
    { if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bits val=(Bit32s)(*eard); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bit64s num=(((Bit64u)cpu_regs.regs[REGI_DX].dword[0])<<32)|cpu_regs.regs[REGI_AX].dword[0]; Bit64s quo=num/val; Bit32s rem=(Bit32s)(num % val); Bit32s quo32s=(Bit32s)(quo&0xffffffff); if (quo!=(Bit64s)quo32s) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].dword[0]=rem; cpu_regs.regs[REGI_AX].dword[0]=quo32s; };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bits val=(Bit32s)(mem_readd(eaa)); if (val==0) { CPU_Exception(0); return CASERET_CONTINUE; }; Bit64s num=(((Bit64u)cpu_regs.regs[REGI_DX].dword[0])<<32)|cpu_regs.regs[REGI_AX].dword[0]; Bit64s quo=num/val; Bit32s rem=(Bit32s)(num % val); Bit32s quo32s=(Bit32s)(quo&0xffffffff); if (quo!=(Bit64s)quo32s) { CPU_Exception(0); return CASERET_CONTINUE; }; cpu_regs.regs[REGI_DX].dword[0]=rem; cpu_regs.regs[REGI_AX].dword[0]=quo32s; };} };
    break;
   }
   return CASERET_BREAK;
  }
}

static int x86_GRP_5_Ed(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
    { if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]+1; *eard=lflags.res.dword[0]; lflags.type=t_INCd;;} else {PhysPt eaa=(core.ea_table)[rm]();;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]+1; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_INCd;;} };
    break;
   case 0x01:
    { if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=*eard; lflags.res.dword[0]=lflags.var1.dword[0]-1; *eard=lflags.res.dword[0]; lflags.type=t_DECd;;} else {PhysPt eaa=(core.ea_table)[rm]();;if (get_CF()) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;;lflags.var1.dword[0]=mem_readd(eaa); lflags.res.dword[0]=lflags.var1.dword[0]-1; mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_DECd;;} };
    break;
   case 0x02:
    if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;cpu_regs.ip.dword[0]=*eard;}
    else {PhysPt eaa=(core.ea_table)[rm]();;cpu_regs.ip.dword[0]=mem_readd(eaa);}
    CPU_Push32((core.cseip-SegPhys(cs)));
    return CASERET_CONTINUE;
   case 0x03:
    {
     if (rm >= 0xc0) return CASERET_ILLEGAL;
     PhysPt eaa=(core.ea_table)[rm]();;
     Bit32u newip=mem_readd(eaa);
     Bit16u newcs=mem_readw(eaa+4);
     FillFlags();
     CPU_CALL(true,newcs,newip,(core.cseip-SegPhys(cs)));

     if ((cpu_regs.flags & 0x00000100)) {
      cpudecoder=CPU_Core_Normal_Trap_Run;
      return CBRET_NONE;
     }

     return CASERET_CONTINUE;
    }
   case 0x04:
    if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;cpu_regs.ip.dword[0]=*eard;}
    else {PhysPt eaa=(core.ea_table)[rm]();;cpu_regs.ip.dword[0]=mem_readd(eaa);}
    return CASERET_CONTINUE;
   case 0x05:
    {
     if (rm >= 0xc0) return CASERET_ILLEGAL;
     PhysPt eaa=(core.ea_table)[rm]();;
     Bit32u newip=mem_readd(eaa);
     Bit16u newcs=mem_readw(eaa+4);
     FillFlags();
     CPU_JMP(true,newcs,newip,(core.cseip-SegPhys(cs)));

     if ((cpu_regs.flags & 0x00000100)) {
      cpudecoder=CPU_Core_Normal_Trap_Run;
      return CBRET_NONE;
     }

     return CASERET_CONTINUE;
    }
    break;
   case 0x06:
    if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;CPU_Push32(*eard);}
    else {PhysPt eaa=(core.ea_table)[rm]();;CPU_Push32(mem_readd(eaa));}
    break;
   default:
    LOG(LOG_CPU,LOG_ERROR)("CPU:66:GRP5:Illegal call %2X",which);
    return CASERET_ILLEGAL;
   }
   return CASERET_BREAK;
  }
}

static int x86_0F_DGRP_6_Exxx(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   switch (which) {
   case 0x00:
   case 0x01:
    {
     Bitu saveval;
     if (!which) saveval=CPU_SLDT();
     else saveval=CPU_STR();
     if (rm >= 0xc0) {Bit16u * earw=lookupRMEAregw[rm];;*earw=(Bit16u)saveval;}
     else {PhysPt eaa=(core.ea_table)[rm]();;mem_writew(eaa,saveval);}
    }
    break;
   case 0x02:case 0x03:case 0x04:case 0x05:
    {

     Bitu loadval;
     if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;loadval=*earw;}
     else {PhysPt eaa=(core.ea_table)[rm]();;loadval=mem_readw(eaa);}
     switch (which) {
     case 0x02:
      if (cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
      if (CPU_LLDT(loadval)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
      break;
     case 0x03:
      if (cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
      if (CPU_LTR(loadval)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
      break;
     case 0x04:
      CPU_VERR(loadval);
      break;
     case 0x05:
      CPU_VERW(loadval);
      break;
     }
    }
    break;
   default:
    LOG(LOG_CPU,LOG_ERROR)("GRP6:Illegal call %2X",which);
    return CASERET_ILLEGAL;
   }
  }
  return CASERET_BREAK;
}

static int x86_Group_7_Ed(void) {
  {
   Bit8u rm=Fetchb();;Bitu which=(rm>>3)&7;
   if (rm < 0xc0) {
    PhysPt eaa=(core.ea_table)[rm]();;Bitu limit;
    switch (which) {
    case 0x00:
     mem_writew(eaa,(Bit16u)CPU_SGDT_limit());
     mem_writed(eaa+2,(Bit32u)CPU_SGDT_base());
     break;
    case 0x01:
     mem_writew(eaa,(Bit16u)CPU_SIDT_limit());
     mem_writed(eaa+2,(Bit32u)CPU_SIDT_base());
     break;
    case 0x02:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     CPU_LGDT(mem_readw(eaa),mem_readd(eaa+2));
     break;
    case 0x03:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     CPU_LIDT(mem_readw(eaa),mem_readd(eaa+2));
     break;
    case 0x04:
     mem_writew(eaa,(Bit16u)CPU_SMSW());
     break;
    case 0x06:
     limit=mem_readw(eaa);
     if (CPU_LMSW((Bit16u)limit)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
     break;
    case 0x07:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     PAGING_ClearTLB();
     break;
    }
   } else {
    Bit32u * eard=lookupRMEAregd[rm];;
    switch (which) {
    case 0x02:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     return CASERET_ILLEGAL;
    case 0x03:
     if (cpu.pmode && cpu.cpl) { CPU_Exception(13); return CASERET_CONTINUE; };
     return CASERET_ILLEGAL;
    case 0x04:
     *eard=(Bit32u)CPU_SMSW();
     break;
    case 0x06:
     if (CPU_LMSW(*eard)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
     break;
    default:
     LOG(LOG_CPU,LOG_ERROR)("Illegal group 7 RM subfunction %d",which);
     return CASERET_ILLEGAL;
     break;
    }

   }
  }
  return CASERET_BREAK;
}

static int x86_LAR_Gd_Ed(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;Bitu ar=*rmrd;
   if (rm >= 0xc0) {
    Bit16u * earw=lookupRMEAregw[rm];;CPU_LAR(*earw,ar);
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;CPU_LAR(mem_readw(eaa),ar);
   }
   *rmrd=(Bit32u)ar;
  }
  return CASERET_BREAK;
}

static int x86_LSL_Gd_Ew(void) {
  {
   if ((cpu_regs.flags & 0x00020000) || (!cpu.pmode)) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;Bitu limit=*rmrd;

   if (rm >= 0xc0) {
    Bit16u * earw=lookupRMEAregw[rm];;CPU_LSL(*earw,limit);
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;CPU_LSL(mem_readw(eaa),limit);
   }
   *rmrd=(Bit32u)limit;
  }
  return CASERET_BREAK;
}

static int x86_0F_DJO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_OF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNO(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_OF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNB(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNZ(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_CF() || get_ZF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNBE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_CF() && !get_ZF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_SF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNS(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_SF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_PF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNP(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_PF())) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) != (get_OF()!=0))) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNL(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if (((get_SF()!=0) == (get_OF()!=0))) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((get_ZF() || ((get_SF()!=0) != (get_OF()!=0)))) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DJNLE(void) {
  { cpu_regs.ip.dword[0]=(core.cseip-SegPhys(cs));; if ((!get_ZF() && ((get_SF()!=0) == (get_OF()!=0)))) cpu_regs.ip.dword[0]+=Fetchds(); cpu_regs.ip.dword[0]+=4; return CASERET_CONTINUE; };return CASERET_BREAK;
}

static int x86_0F_DPUSH_FS(void) {
  CPU_Push32(SegValue(fs));return CASERET_BREAK;
}

static int x86_0F_DPOP_FS(void) {
  if (CPU_PopSeg(fs,true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_BT_Ed_Gd(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   Bit32u mask=1 << (*rmrd & 31);
   if (rm >= 0xc0 ) {
    Bit32u * eard=lookupRMEAregd[rm];;
    if ((*eard & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit32s)*rmrd)>>5)*4;
    Bit32u old=mem_readd(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
   }
   return CASERET_BREAK;
  }
}

static int x86_SHLD_Ed_Gd_Ib(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (*rmrd >> (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; lflags.type=t_DSHLd;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (*rmrd >> (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_DSHLd;;} };
  return CASERET_BREAK;
}

static int x86_SHLD_Ed_Gd_CL(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (*rmrd >> (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; lflags.type=t_DSHLd;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); lflags.res.dword[0]=(lflags.var1.dword[0] << lflags.var2.byte[0]) | (*rmrd >> (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_DSHLd;;} };
  return CASERET_BREAK;
}

static int x86_0F_DPUSH_GS(void) {
  CPU_Push32(SegValue(gs));return CASERET_BREAK;
}

static int x86_0F_DPOP_GS(void) {
  if (CPU_PopSeg(gs,true)) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
  return CASERET_BREAK;
}

static int x86_BTS_Ed_Gd(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   Bit32u mask=1 << (*rmrd & 31);
   if (rm >= 0xc0 ) {
    Bit32u * eard=lookupRMEAregd[rm];;
    if ((*eard & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    *eard|=mask;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit32s)*rmrd)>>5)*4;
    Bit32u old=mem_readd(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    mem_writed(eaa,old | mask);
   }
   return CASERET_BREAK;
  }
}

static int x86_SHRD_Ed_Gd_Ib(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (*rmrd << (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; lflags.type=t_DSHRd;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=Fetchb() & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (*rmrd << (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_DSHRd;;} };
  return CASERET_BREAK;
}

static int x86_SHRD_Ed_Gd_CL(void) {
  { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=*eard; lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (*rmrd << (32-lflags.var2.byte[0])); *eard=lflags.res.dword[0]; lflags.type=t_DSHRd;;} else {PhysPt eaa=(core.ea_table)[rm]();;Bit8u val=cpu_regs.regs[REGI_CX].byte[0] & 0x1F; if (!val) return CASERET_BREAK; lflags.var2.byte[0]=val;lflags.var1.dword[0]=mem_readd(eaa); lflags.res.dword[0]=(lflags.var1.dword[0] >> lflags.var2.byte[0]) | (*rmrd << (32-lflags.var2.byte[0])); mem_writed(eaa,lflags.res.dword[0]); lflags.type=t_DSHRd;;} };
  return CASERET_BREAK;
}

static int x86_IMUL_Gd_Ed(void) {
  {
   { Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;; if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;{ Bit64s res=((Bit64s)((Bit32s)*eard))*((Bit64s)((Bit32s)*rmrd)); *rmrd=(Bit32s)res; FillFlagsNoCFOF(); if ((res>=-((Bit64s)(2147483647)+1)) && (res<=(Bit64s)2147483647)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} else {PhysPt eaa=(core.ea_table)[rm]();;{ Bit64s res=((Bit64s)((Bit32s)mem_readd(eaa)))*((Bit64s)((Bit32s)*rmrd)); *rmrd=(Bit32s)res; FillFlagsNoCFOF(); if ((res>=-((Bit64s)(2147483647)+1)) && (res<=(Bit64s)2147483647)) { if (false) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (false) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } else { if (true) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;if (true) cpu_regs.flags|=0x00000800; else cpu_regs.flags&=~0x00000800; } };} };
   return CASERET_BREAK;
  }
}

static int x86_CMPXCHG_Ed_Gd(void) {
  {
   if (CPU_ArchitectureType<0x45) return CASERET_ILLEGAL;
   FillFlags();
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0) {
    Bit32u * eard=lookupRMEAregd[rm];;
    if (*eard==cpu_regs.regs[REGI_AX].dword[0]) {
     *eard=*rmrd;
     if (1) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    } else {
     cpu_regs.regs[REGI_AX].dword[0]=*eard;
     if (0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;
    Bit32u val=mem_readd(eaa);
    if (val==cpu_regs.regs[REGI_AX].dword[0]) {
     mem_writed(eaa,*rmrd);
     if (1) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    } else {
     mem_writed(eaa,val);
     cpu_regs.regs[REGI_AX].dword[0]=val;
     if (0) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_LSS_Ed(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(ss,mem_readw(eaa+4))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrd=mem_readd(eaa);
   return CASERET_BREAK;
  }
}

static int x86_BTR_Ed_Gd(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   Bit32u mask=1 << (*rmrd & 31);
   if (rm >= 0xc0 ) {
    Bit32u * eard=lookupRMEAregd[rm];;
    if ((*eard & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    *eard&= ~mask;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit32s)*rmrd)>>5)*4;
    Bit32u old=mem_readd(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    mem_writed(eaa,old & ~mask);
   }
   return CASERET_BREAK;
  }
}

static int x86_LFS_Ed(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(fs,mem_readw(eaa+4))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrd=mem_readd(eaa);
   return CASERET_BREAK;
  }
}

static int x86_LGS_Ed(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0) return CASERET_ILLEGAL;
   PhysPt eaa=(core.ea_table)[rm]();;
   if (CPU_SetSegGeneral(gs,mem_readw(eaa+4))) { CPU_Exception(cpu.exception.which,cpu.exception.error); return CASERET_CONTINUE; };
   *rmrd=mem_readd(eaa);
   return CASERET_BREAK;
  }
}

static int x86_MOVZX_Gd_Eb(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrd=*earb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=mem_readb(eaa);}
   return CASERET_BREAK;
  }
}

static int x86_MOVXZ_Gd_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*rmrd=*earw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=mem_readw(eaa);}
   return CASERET_BREAK;
  }
}

static int x86_GRP8_Ed_Ib(void) {
  {
   FillFlags();Bit8u rm=Fetchb();;
   if (rm >= 0xc0 ) {
    Bit32u * eard=lookupRMEAregd[rm];;
    Bit32u mask=1 << (Fetchb() & 31);
    if ((*eard & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    switch (rm & 0x38) {
    case 0x20:
     break;
    case 0x28:
     *eard|=mask;
     break;
    case 0x30:
     *eard&=~mask;
     break;
    case 0x38:
     if ((cpu_regs.flags & 0x00000001)) *eard&=~mask;
     else *eard|=mask;
     break;
    default:
     E_Exit("CPU:66:0F:BA:Illegal subfunction %X",rm & 0x38);
    }
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;Bit32u old=mem_readd(eaa);
    Bit32u mask=1 << (Fetchb() & 31);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    switch (rm & 0x38) {
    case 0x20:
     break;
    case 0x28:
     mem_writed(eaa,old|mask);
     break;
    case 0x30:
     mem_writed(eaa,old & ~mask);
     break;
    case 0x38:
     if ((cpu_regs.flags & 0x00000001)) old&=~mask;
     else old|=mask;
     mem_writed(eaa,old);
     break;
    default:
     E_Exit("CPU:66:0F:BA:Illegal subfunction %X",rm & 0x38);
    }
   }
   return CASERET_BREAK;
  }
}

static int x86_BTC_Ed_Gd(void) {
  {
   FillFlags();Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   Bit32u mask=1 << (*rmrd & 31);
   if (rm >= 0xc0 ) {
    Bit32u * eard=lookupRMEAregd[rm];;
    if ((*eard & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    *eard^=mask;
   } else {
    PhysPt eaa=(core.ea_table)[rm]();;eaa+=(((Bit32s)*rmrd)>>5)*4;
    Bit32u old=mem_readd(eaa);
    if ((old & mask)) cpu_regs.flags|=0x00000001; else cpu_regs.flags&=~0x00000001;
    mem_writed(eaa,old ^ mask);
   }
   return CASERET_BREAK;
  }
}

static int x86_BSF_Gd_Ed(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   Bit32u result,value;
   if (rm >= 0xc0) { Bit32u * eard=lookupRMEAregd[rm];; value=*eard; }
   else { PhysPt eaa=(core.ea_table)[rm]();; value=mem_readd(eaa); }
   if (value==0) {
    if (true) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
   } else {
    result = 0;
    while ((value & 0x01)==0) { result++; value>>=1; }
    if (false) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    *rmrd = result;
   }
   lflags.type=t_UNKNOWN;
   return CASERET_BREAK;
  }
}

static int x86_BSR_Gd_Ed(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   Bit32u result,value;
   if (rm >= 0xc0) { Bit32u * eard=lookupRMEAregd[rm];; value=*eard; }
   else { PhysPt eaa=(core.ea_table)[rm]();; value=mem_readd(eaa); }
   if (value==0) {
    if (true) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
   } else {
    result = 31;
    while ((value & 0x80000000)==0) { result--; value<<=1; }
    if (false) cpu_regs.flags|=0x00000040; else cpu_regs.flags&=~0x00000040;
    *rmrd = result;
   }
   lflags.type=t_UNKNOWN;
   return CASERET_BREAK;
  }
}

static int x86_MOVSX_Gd_Eb(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0 ) {Bit8u * earb=lookupRMEAregb[rm];;*rmrd=*(Bit8s *)earb;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=(Bit8s)(mem_readb(eaa));}
   return CASERET_BREAK;
  }
}

static int x86_MOVSX_Gd_Ew(void) {
  {
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;
   if (rm >= 0xc0 ) {Bit16u * earw=lookupRMEAregw[rm];;*rmrd=*(Bit16s *)earw;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=(Bit16s)(mem_readw(eaa));}
   return CASERET_BREAK;
  }
}

static int x86_XADD_Gd_Ed(void) {
  {
   if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
   Bit8u rm=Fetchb();; Bit32u * rmrd; rmrd=lookupRMregd[rm];;;Bit32u oldrmrd=*rmrd;
   if (rm >= 0xc0 ) {Bit32u * eard=lookupRMEAregd[rm];;*rmrd=*eard;*eard+=oldrmrd;}
   else {PhysPt eaa=(core.ea_table)[rm]();;*rmrd=mem_readd(eaa);mem_writed(eaa,mem_readd(eaa)+oldrmrd);}
   return CASERET_BREAK;
  }
}

static int x86_BSWAP_EAX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_AX].dword[0] = (cpu_regs.regs[REGI_AX].dword[0]>>24)|((cpu_regs.regs[REGI_AX].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_AX].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_AX].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_ECX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_CX].dword[0] = (cpu_regs.regs[REGI_CX].dword[0]>>24)|((cpu_regs.regs[REGI_CX].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_CX].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_CX].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_EDX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_DX].dword[0] = (cpu_regs.regs[REGI_DX].dword[0]>>24)|((cpu_regs.regs[REGI_DX].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_DX].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_DX].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_EBX(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_BX].dword[0] = (cpu_regs.regs[REGI_BX].dword[0]>>24)|((cpu_regs.regs[REGI_BX].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_BX].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_BX].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_ESP(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_SP].dword[0] = (cpu_regs.regs[REGI_SP].dword[0]>>24)|((cpu_regs.regs[REGI_SP].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_SP].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_SP].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_EBP(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_BP].dword[0] = (cpu_regs.regs[REGI_BP].dword[0]>>24)|((cpu_regs.regs[REGI_BP].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_BP].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_BP].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_ESI(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_SI].dword[0] = (cpu_regs.regs[REGI_SI].dword[0]>>24)|((cpu_regs.regs[REGI_SI].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_SI].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_SI].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}

static int x86_BSWAP_EDI(void) {
  if (CPU_ArchitectureType<0x40) return CASERET_ILLEGAL;
  cpu_regs.regs[REGI_DI].dword[0] = (cpu_regs.regs[REGI_DI].dword[0]>>24)|((cpu_regs.regs[REGI_DI].dword[0]>>8)&0xFF00)|((cpu_regs.regs[REGI_DI].dword[0]<<8)&0xFF0000)|((cpu_regs.regs[REGI_DI].dword[0]<<24)&0xFF000000);;return CASERET_BREAK;
}


int (* const x86_funptr[1024])(void) = {
x86_ADD_Eb_Gb, x86_ADD_Ew_Gw, x86_ADD_Gb_Eb, x86_ADD_Gw_Ew, x86_ADD_AL_Ib,
x86_ADD_AX_Iw, x86_WPUSH_ES, x86_WPOP_ES, x86_OR_Eb_Gb, x86_OR_Ew_Gw,
x86_OR_Gb_Eb, x86_OR_Gw_Ew, x86_OR_AL_Ib, x86_OR_AX_Iw, x86_WPUSH_CS,
x86_2_byte_opcodes, x86_ADC_Eb_Gb, x86_ADC_Ew_Gw, x86_ADC_Gb_Eb, x86_ADC_Gw_Ew,
x86_ADC_AL_Ib, x86_ADC_AX_Iw, x86_WPUSH_SS, x86_WPOP_SS, x86_SBB_Eb_Gb,
x86_SBB_Ew_Gw, x86_SBB_Gb_Eb, x86_SBB_Gw_Ew, x86_SBB_AL_Ib, x86_SBB_AX_Iw,
x86_WPUSH_DS, x86_WPOP_DS, x86_AND_Eb_Gb, x86_AND_Ew_Gw, x86_AND_Gb_Eb,
x86_AND_Gw_Ew, x86_AND_AL_Ib, x86_AND_AX_Iw, x86_SEG_ES, x86_DAA,
x86_SUB_Eb_Gb, x86_SUB_Ew_Gw, x86_SUB_Gb_Eb, x86_SUB_Gw_Ew, x86_SUB_AL_Ib,
x86_SUB_AX_Iw, x86_SEG_CS, x86_DAS, x86_XOR_Eb_Gb, x86_XOR_Ew_Gw,
x86_XOR_Gb_Eb, x86_XOR_Gw_Ew, x86_XOR_AL_Ib, x86_XOR_AX_Iw, x86_SEG_SS,
x86_AAA, x86_CMP_Eb_Gb, x86_CMP_Ew_Gw, x86_CMP_Gb_Eb, x86_CMP_Gw_Ew,
x86_CMP_AL_Ib, x86_CMP_AX_Iw, x86_SEG_DS, x86_AAS, x86_INC_AX, x86_INC_CX,
x86_INC_DX, x86_INC_BX, x86_INC_SP, x86_INC_BP, x86_INC_SI, x86_INC_DI,
x86_DEC_AX, x86_DEC_CX, x86_DEC_DX, x86_DEC_BX, x86_DEC_SP, x86_DEC_BP,
x86_DEC_SI, x86_DEC_DI, x86_PUSH_AX, x86_PUSH_CX, x86_PUSH_DX, x86_PUSH_BX,
x86_PUSH_SP, x86_PUSH_BP, x86_PUSH_SI, x86_PUSH_DI, x86_POP_AX, x86_POP_CX,
x86_POP_DX, x86_POP_BX, x86_POP_SP, x86_POP_BP, x86_POP_SI, x86_POP_DI,
x86_PUSHA, x86_POPA, x86_BOUND, x86_ARPL_Ew_Rw, x86_SEG_FS, x86_SEG_GS,
x86_Operand_Size_Prefix, x86_Address_Size_Prefix, x86_PUSH_Iw,
x86_IMUL_Gw_Ew_Iw, x86_WPUSH_Ib, x86_IMUL_Gw_Ew_Ib, x86_INSB, x86_INSW,
x86_OUTSB, x86_OUTSW, x86_WJO, x86_WJNO, x86_WJB, x86_WJNB, x86_WJZ, x86_WJNZ,
x86_WJBE, x86_WJNBE, x86_WJS, x86_WJNS, x86_WJP, x86_WJNP, x86_WJL, x86_WJNL,
x86_WJLE, x86_WJNLE, x86_Grpl_Eb_Ib, x86_Grpl_Ew_Iw, x86_Grpl_Eb_Ib,
x86_Grpl_Ew_Ix, x86_TEST_Eb_Gb, x86_TEST_Ew_Gw, x86_XCHG_Eb_Gb, x86_XCHG_Ew_Gw,
x86_MOV_Eb_Gb, x86_MOV_Ew_Gw, x86_MOV_Gb_Eb, x86_MOV_Gw_Ew, x86_WMov_Ew_Sw,
x86_LEA_Gw, x86_MOV_Sw_Ew, x86_POP_Ew, x86_NOP, x86_XCHG_CX_AX, x86_XCHG_DX_AX,
x86_XCHG_BX_AX, x86_XCHG_SP_AX, x86_XCHG_BP_AX, x86_XCHG_SI_AX, x86_XCHG_DI_AX,
x86_CBW, x86_CWD, x86_CALL_Ap, x86_NOP, x86_PUSHF, x86_POPF, x86_SAHF,
x86_LAHF, x86_MOV_AL_Ob, x86_MOV_AX_Ow, x86_MOV_Ob_AL, x86_MOV_Ow_AX,
x86_MOVSB, x86_MOVSW, x86_CMPSB, x86_CMPSW, x86_TEST_AL_Ib, x86_TEST_AX_Iw,
x86_STOSB, x86_STOSW, x86_LODSB, x86_LODSW, x86_SCASB, x86_SCASW,
x86_MOV_AL_Ib, x86_MOV_CL_Ib, x86_MOV_DL_Ib, x86_MOV_BL_Ib, x86_MOV_AH_Ib,
x86_MOV_CH_Ib, x86_MOV_DH_Ib, x86_MOV_BH_Ib, x86_MOV_AX_Iw, x86_MOV_CX_Iw,
x86_MOV_DX_Iw, x86_MOV_BX_Iw, x86_MOV_SP_Iw, x86_MOV_BP_Iw, x86_MOV_SI_Iw,
x86_MOV_DI_Iw, x86_GRP2_Eb_Ib, x86_GRP2_Ew_Ib, x86_WRETN_Iw, x86_WRETN,
x86_WLES, x86_WLDS, x86_MOV_Eb_Ib, x86_MOV_EW_Iw, x86_WENTER_Iw_Ib, x86_WLEAVE,
x86_WRETF_Iw, x86_WRETF, x86_INT3, x86_INT_Ib, x86_INTO, x86_WIRET,
x86_GRP2_Eb_1, x86_GRP2_Ew_1, x86_GRP2_Eb_CL, x86_GRP2_Ew_CL, x86_AAM_Ib,
x86_AAD_Ib, x86_SALC, x86_XLAT, x86_FPU_ESC_0, x86_FPU_ESC_1, x86_FPU_ESC_2,
x86_FPU_ESC_3, x86_FPU_ESC_4, x86_FPU_ESC_5, x86_FPU_ESC_6, x86_FPU_ESC_7,
x86_WLOOPNZ, x86_WLOOPZ, x86_WLOOP, x86_WJCXZ, x86_IN_AL_Ib, x86_IN_AX_Ib,
x86_OUT_Ib_AL, x86_OUT_Ib_AX, x86_CALL_Jw, x86_JMP_Jw, x86_JMP_Ap, x86_WJMP_Jb,
x86_IN_AL_DX, x86_IN_AX_DX, x86_OUT_DX_AL, x86_OUT_DX_AX, x86_LOCK, x86_ICEBP,
x86_REPNZ, x86_REPZ, x86_HLT, x86_CMC, x86_GRP3_Eb_Ib, x86_GRP3_Ew_Iw, x86_CLC,
x86_STC, x86_CLI, x86_STI, x86_CLD, x86_STD, x86_GRP4_Eb, x86_GRP5_Ew,
x86_0F_WGRP_6_Exxx, x86_Group_7_Ew, x86_LAR_Gw_Ew, x86_LSL_Gw_Ew, x86_illegal,
x86_illegal, x86_CLTS, x86_illegal, x86_INVD, x86_INVD, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_MOV_Rd_CRx, x86_MOV_Rd_DRx,
x86_MOV_CRx_Rd, x86_MOV_DRx_Rd, x86_MOV_Rd_TRx, x86_illegal, x86_MOV_TRx_Rd,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_RDTSC, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_0F_WJO,
x86_0F_WJNO, x86_0F_WJB, x86_0F_WJNB, x86_0F_WJZ, x86_0F_WJNZ, x86_0F_WJBE,
x86_0F_WJNBE, x86_0F_WJS, x86_0F_WJNS, x86_0F_WJP, x86_0F_WJNP, x86_0F_WJL,
x86_0F_WJNL, x86_0F_WJLE, x86_0F_WJNLE, x86_SETO, x86_SETNO, x86_SETB,
x86_SETNB, x86_SETZ, x86_SETNZ, x86_SETBE, x86_SETNBE, x86_SETS, x86_SETNS,
x86_SETP, x86_SETNP, x86_SETL, x86_SETNL, x86_SETLE, x86_SETNLE,
x86_0F_WPUSH_FS, x86_0F_WPOP_FS, x86_CPUID, x86_BT_Ew_Gw, x86_SHLD_Ew_Gw_Ib,
x86_SHLD_Ew_Gw_CL, x86_illegal, x86_illegal, x86_0F_WPUSH_GS, x86_0F_WPOP_GS,
x86_illegal, x86_BTS_Ew_Gw, x86_SHRD_Ew_Gw_Ib, x86_SHRD_Ew_Gw_CL, x86_illegal,
x86_IMUL_Gw_Ew, x86_cmpxchg_Eb_Gb, x86_cmpxchg_Ew_Gw, x86_LSS_Ew,
x86_BTR_Ew_Gw, x86_LFS_Ew, x86_LGS_Ew, x86_MOVZX_Gw_Eb, x86_MOV_Gw_Ew,
x86_illegal, x86_illegal, x86_GRP8_Ew_Ib, x86_BTC_Ew_Gw, x86_BSF_Gw_Ew,
x86_BSR_Gw_Ew, x86_MOVSX_Gw_Eb, x86_MOV_Gw_Ew, x86_XADD_Gb_Eb, x86_XADD_Gw_Ew,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_BSWAP_AX, x86_BSWAP_CX, x86_BSWAP_DX, x86_BSWAP_BX, x86_BSWAP_SP,
x86_BSWAP_BP, x86_BSWAP_SI, x86_BSWAP_DI, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_ADD_Eb_Gb,
x86_ADD_Ed_Gd, x86_ADD_Gb_Eb, x86_ADD_Gd_Ed, x86_ADD_AL_Ib, x86_ADD_EAX_Id,
x86_DPUSH_ES, x86_DPOP_ES, x86_OR_Eb_Gb, x86_OR_Ed_Gd, x86_OR_Gb_Eb,
x86_OR_Gd_Ed, x86_OR_AL_Ib, x86_OR_EAX_Id, x86_DPUSH_CS, x86_2_byte_opcodes,
x86_ADC_Eb_Gb, x86_ADC_Ed_Gd, x86_ADC_Gb_Eb, x86_ADC_Gd_Ed, x86_ADC_AL_Ib,
x86_ADC_EAX_Id, x86_DPUSH_SS, x86_DPOP_SS, x86_SBB_Eb_Gb, x86_SBB_Ed_Gd,
x86_SBB_Gb_Eb, x86_SBB_Gd_Ed, x86_SBB_AL_Ib, x86_SBB_EAX_Id, x86_DPUSH_DS,
x86_DPOP_DS, x86_AND_Eb_Gb, x86_AND_Ed_Gd, x86_AND_Gb_Eb, x86_AND_Gd_Ed,
x86_AND_AL_Ib, x86_AND_EAX_Id, x86_SEG_ES, x86_DAA, x86_SUB_Eb_Gb,
x86_SUB_Ed_Gd, x86_SUB_Gb_Eb, x86_SUB_Gd_Ed, x86_SUB_AL_Ib, x86_SUB_EAX_Id,
x86_SEG_CS, x86_DAS, x86_XOR_Eb_Gb, x86_XOR_Ed_Gd, x86_XOR_Gb_Eb,
x86_XOR_Gd_Ed, x86_XOR_AL_Ib, x86_XOR_EAX_Id, x86_SEG_SS, x86_AAA,
x86_CMP_Eb_Gb, x86_CMP_Ed_Gd, x86_CMP_Gb_Eb, x86_CMP_Gd_Ed, x86_CMP_AL_Ib,
x86_CMP_EAX_Id, x86_SEG_DS, x86_AAS, x86_INC_EAX, x86_INC_ECX, x86_INC_EDX,
x86_INC_EBX, x86_INC_ESP, x86_INC_EBP, x86_INC_ESI, x86_INC_EDI, x86_DEC_EAX,
x86_DEC_ECX, x86_DEC_EDX, x86_DEC_EBX, x86_DEC_ESP, x86_DEC_EBP, x86_DEC_ESI,
x86_DEC_EDI, x86_PUSH_EAX, x86_PUSH_ECX, x86_PUSH_EDX, x86_PUSH_EBX,
x86_PUSH_ESP, x86_PUSH_EBP, x86_PUSH_ESI, x86_PUSH_EDI, x86_POP_EAX,
x86_POP_ECX, x86_POP_EDX, x86_POP_EBX, x86_POP_ESP, x86_POP_EBP, x86_POP_ESI,
x86_POP_EDI, x86_PUSHAD, x86_POPAD, x86_BOUND_Ed, x86_ARPL_Ed_Rd, x86_SEG_FS,
x86_SEG_GS, x86_Operand_Size_Prefix, x86_Address_Size_Prefix, x86_PUSH_Id,
x86_IMUL_Gd_Ed_Id, x86_DPUSH_Ib, x86_IMUL_Gd_Ed_Ib, x86_INSB, x86_INSD,
x86_OUTSB, x86_OUTSD, x86_DJO, x86_DJNO, x86_DJB, x86_DJNB, x86_DJZ, x86_DJNZ,
x86_DJBE, x86_DJNBE, x86_DJS, x86_DJNS, x86_DJP, x86_DJNP, x86_DJL, x86_DJNL,
x86_DJLE, x86_DJNLE, x86_Grpl_Eb_Ib, x86_Grpl_Ed_Id, x86_Grpl_Eb_Ib,
x86_Grpl_Ed_Ix, x86_TEST_Eb_Gb, x86_TEST_Ed_Gd, x86_XCHG_Eb_Gb, x86_XCHG_Ed_Gd,
x86_MOV_Eb_Gb, x86_MOV_Ed_Gd, x86_MOV_Gb_Eb, x86_MOV_Gd_Ed, x86_DMov_Ew_Sw,
x86_LEA_Gd, x86_MOV_Sw_Ew, x86_POP_Ed, x86_NOP, x86_XCHG_ECX_EAX,
x86_XCHG_EDX_EAX, x86_XCHG_EBX_EAX, x86_XCHG_ESP_EAX, x86_XCHG_EBP_EAX,
x86_XCHG_ESI_EAX, x86_XCHG_EDI_EAX, x86_CWDE, x86_CDQ, x86_CALL_FAR_Ad,
x86_NOP, x86_PUSHFD, x86_POPFD, x86_SAHF, x86_LAHF, x86_MOV_AL_Ob,
x86_MOV_EAX_Od, x86_MOV_Ob_AL, x86_MOV_Od_EAX, x86_MOVSB, x86_MOVSD, x86_CMPSB,
x86_CMPSD, x86_TEST_AL_Ib, x86_TEST_EAX_Id, x86_STOSB, x86_STOSD, x86_LODSB,
x86_LODSD, x86_SCASB, x86_SCASD, x86_MOV_AL_Ib, x86_MOV_CL_Ib, x86_MOV_DL_Ib,
x86_MOV_BL_Ib, x86_MOV_AH_Ib, x86_MOV_CH_Ib, x86_MOV_DH_Ib, x86_MOV_BH_Ib,
x86_MOV_EAX_Id, x86_MOV_ECX_Id, x86_MOV_EDX_Iw, x86_MOV_EBX_Id, x86_MOV_ESP_Id,
x86_MOV_EBP_Id, x86_MOV_ESI_Id, x86_MOV_EDI_Id, x86_GRP2_Eb_Ib, x86_GRP2_Ed_Ib,
x86_DRETN_Iw, x86_DRETN, x86_DLES, x86_DLDS, x86_MOV_Eb_Ib, x86_MOV_Ed_Id,
x86_DENTER_Iw_Ib, x86_DLEAVE, x86_DRETF_Iw, x86_DRETF, x86_INT3, x86_INT_Ib,
x86_INTO, x86_DIRET, x86_GRP2_Eb_1, x86_GRP2_Ed_1, x86_GRP2_Eb_CL,
x86_GRP2_Ed_CL, x86_AAM_Ib, x86_AAD_Ib, x86_SALC, x86_XLAT, x86_FPU_ESC_0,
x86_FPU_ESC_1, x86_FPU_ESC_2, x86_FPU_ESC_3, x86_FPU_ESC_4, x86_FPU_ESC_5,
x86_FPU_ESC_6, x86_FPU_ESC_7, x86_DLOOPNZ, x86_DLOOPZ, x86_DLOOP, x86_DJCXZ,
x86_IN_AL_Ib, x86_IN_EAX_Ib, x86_OUT_Ib_AL, x86_OUT_Ib_EAX, x86_CALL_Jd,
x86_JMP_Jd, x86_JMP_Ad, x86_DJMP_Jb, x86_IN_AL_DX, x86_IN_EAX_DX,
x86_OUT_DX_AL, x86_OUT_DX_EAX, x86_LOCK, x86_ICEBP, x86_REPNZ, x86_REPZ,
x86_HLT, x86_CMC, x86_GRP3_Eb_Ib, x86_GRP3_Ed_Id, x86_CLC, x86_STC, x86_CLI,
x86_STI, x86_CLD, x86_STD, x86_GRP4_Eb, x86_GRP_5_Ed, x86_0F_DGRP_6_Exxx,
x86_Group_7_Ed, x86_LAR_Gd_Ed, x86_LSL_Gd_Ew, x86_illegal, x86_illegal,
x86_CLTS, x86_illegal, x86_INVD, x86_INVD, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_MOV_Rd_CRx, x86_MOV_Rd_DRx, x86_MOV_CRx_Rd,
x86_MOV_DRx_Rd, x86_MOV_Rd_TRx, x86_illegal, x86_MOV_TRx_Rd, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_RDTSC, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_0F_DJO, x86_0F_DJNO,
x86_0F_DJB, x86_0F_DJNB, x86_0F_DJZ, x86_0F_DJNZ, x86_0F_DJBE, x86_0F_DJNBE,
x86_0F_DJS, x86_0F_DJNS, x86_0F_DJP, x86_0F_DJNP, x86_0F_DJL, x86_0F_DJNL,
x86_0F_DJLE, x86_0F_DJNLE, x86_SETO, x86_SETNO, x86_SETB, x86_SETNB, x86_SETZ,
x86_SETNZ, x86_SETBE, x86_SETNBE, x86_SETS, x86_SETNS, x86_SETP, x86_SETNP,
x86_SETL, x86_SETNL, x86_SETLE, x86_SETNLE, x86_0F_DPUSH_FS, x86_0F_DPOP_FS,
x86_CPUID, x86_BT_Ed_Gd, x86_SHLD_Ed_Gd_Ib, x86_SHLD_Ed_Gd_CL, x86_illegal,
x86_illegal, x86_0F_DPUSH_GS, x86_0F_DPOP_GS, x86_illegal, x86_BTS_Ed_Gd,
x86_SHRD_Ed_Gd_Ib, x86_SHRD_Ed_Gd_CL, x86_illegal, x86_IMUL_Gd_Ed,
x86_cmpxchg_Eb_Gb, x86_CMPXCHG_Ed_Gd, x86_LSS_Ed, x86_BTR_Ed_Gd, x86_LFS_Ed,
x86_LGS_Ed, x86_MOVZX_Gd_Eb, x86_MOVXZ_Gd_Ew, x86_illegal, x86_illegal,
x86_GRP8_Ed_Ib, x86_BTC_Ed_Gd, x86_BSF_Gd_Ed, x86_BSR_Gd_Ed, x86_MOVSX_Gd_Eb,
x86_MOVSX_Gd_Ew, x86_XADD_Gb_Eb, x86_XADD_Gd_Ed, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_BSWAP_EAX,
x86_BSWAP_ECX, x86_BSWAP_EDX, x86_BSWAP_EBX, x86_BSWAP_ESP, x86_BSWAP_EBP,
x86_BSWAP_ESI, x86_BSWAP_EDI, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal, x86_illegal,
x86_illegal, x86_illegal, x86_illegal
};
